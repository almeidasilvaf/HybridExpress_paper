{
  "hash": "56f22231ab073c9426d1645d52439d20",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Appendix: Data acquisition {.unnumbered}\n\nHere, you can find the code used to obtain the benchmark data.\n\n## se_cotton.rda\n\nThis data set was obtained from [@dong2022parental], and it comprises \nRNA-seq data on cotton (*Gossypium*) species of\ndifferent ploidy levels (i.e., allopolyploids and their diploid progenitors)\nunder salt stress. The `SummarizedExperiment` object was created with the\ncode below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(SummarizedExperiment)\nlibrary(tidyverse)\n\n# Get count matrix\ncounts <- read.table(\n    file.path(\n        \"https://raw.githubusercontent.com/Wendellab\",\n        \"SaltStressTranscriptome/master/salt.counts\"\n    ),\n    header = TRUE, sep = \"\\t\", row.names = 1\n)[, -c(1:5)]\nnames(counts) <- gsub(\"sort.bam\", \"sort.T.bam\", names(counts))\nnames(counts) <- gsub(\".sort|.bam|_5.22|_5.23|6.11\", \"\", names(counts))\n\n# Get subset of data for each species\nA2count <- counts[, grep(\"A2\", names(counts))]\nA2count <- cbind(\n    A2count[, 1:5] + A2count[, 6:10], # Control 1\n    A2count[, grep(\"CK2\", names(A2count))], # Control 2\n    A2count[, 16:20] + A2count[, 21:25], # Control 3\n    A2count[, grep(\"Salt1\", names(A2count))], # Salt 1\n    A2count[, 31:35] + A2count[, 36:40], # Salt 2\n    A2count[, 41:45] + A2count[, 46:50] # Salt 3\n)\n\n# Combine count matrices\nc_counts <- cbind(A2count, D5count, TM1count, AD4count)\n\n# Get total counts\ndiploid_total <- c_counts[, grep(\"A2.*T$|D5.*T$\", names(c_counts))]\nTM1_total <- c_counts[, grep(\"TM1.*A$|TM1.*D$\", names(c_counts))]\nTM1_total <- TM1_total[, seq(1, 11, by = 2)] + TM1_total[, seq(2, 12, by = 2)]\nAD4_total <- c_counts[, grep(\"AD4.*A$|AD4.*D$\", names(c_counts))]\nAD4_total <- AD4_total[, seq(1, 11, by = 2)] + AD4_total[, seq(2, 12, by = 2)]\ncounts_total <- cbind(diploid_total, TM1_total, AD4_total)\n\n# Polish column names\nnames(counts_total) <- gsub(\"\\\\.T|\\\\.A|_\\\\.T|_\\\\.A\", \"\", names(counts_total))\nnames(counts_total) <- gsub(\"TM1\", \"AD1\", names(counts_total))\n\n# Create colData\ncoldata <- data.frame(\n    row.names = names(counts_total),\n    species = rep(c(\"A2\", \"D5\", \"AD1\", \"AD4\"), each = 6),\n    condition = rep(rep(c(\"Control\", \"Salt\"), each = 3), 4),\n    rep = rep(1:3, 8)\n) |>\n    mutate(\n        sample = paste(species, condition, sep = \"_\"),\n        species_name = rep(\n            c(\"Garboreum\", \"Graimondii\", \"Ghirsutum_TM1\", \"Gmustelinum\"), \n            each = 6\n        ),\n        ploidy = rep(c(\"di\", \"allo\"), each = 12)\n    ) |>\n    select(species_name, species, ploidy, condition, sample, rep)\n\n\n# Creating the SummarizedExperiment object\nse_cotton <- SummarizedExperiment(\n    assays = list(counts = as.matrix(counts_total)),\n    colData = coldata\n)\n\n# Save object to file\nsave(\n    se_cotton, compress = \"xz\",\n    file = here::here(\"data\", \"se_cotton.rda\")\n)\n```\n:::\n\n\n## cotton_functions.rda\n\nThis object contains a list of data frames with GO, InterPro, and MapMan\nannotations for genes in the *G. raimondii* genome. Data were obtained\nfrom PLAZA Dicots 5.0 [@van2022plaza].\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get data frames\ngo_df <- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/GO/go.gra.csv.gz\",\n    skip = 8\n) |>\n    dplyr::select(gene = `#gene_id`, description)\n\ninterpro_df <- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/InterPro/interpro.gra.csv.gz\",\n    skip = 8\n) |>\n    dplyr::select(gene = `#gene_id`, description)\n\nmapman_df <- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/MapMan/mapman.gra.csv.gz\",\n    skip = 8\n) |>\n    dplyr::select(gene = gene_id, description = desc)\n\n# Create list\ncotton_functions <- list(\n    GO = go_df,\n    InterPro = interpro_df,\n    MapMan = mapman_df\n)\n\n# Save object to .rda file\nsave(\n    cotton_functions, compress = \"xz\", \n    file = here(\"data\", \"cotton_functions.rda\")\n)\n```\n:::\n\n\n## se_rice.rda\n\nThis file contains a `SummarizedExperiment` object with data from\n@zhai2013transcriptome, obtained from GEO under accession number GSE41797.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read data set from GEO\nrice <- readr::read_tsv(\n    \"https://ftp.ncbi.nlm.nih.gov/geo/series/GSE41nnn/GSE41797/suppl/GSE41797%5Frice%5Fall%5Fresults.txt.gz\"\n)\n\n# Get count matrix\nrice_exp <- rice |>\n    dplyr::select(\n        Gene_id, R1, R2, R3, R4, X1, X2, X3, X4, F1, F2, F3, F4\n    ) |>\n    tibble::column_to_rownames(\"Gene_id\") |>\n    as.matrix()\n\n# Get sample metadata\nrice_coldata <- data.frame(\n    row.names = colnames(rice_exp),\n    Line = c(\n        rep(\"R9308\", 4), rep(\"Xieqingzao B\", 4), rep(\"Xieyou 9308\", 4)\n    ),\n    Stage = rep(c(\"Tillering\", \"Tillering\", \"Heading\", \"Heading\"), 3),\n    Generation = c(\n        rep(\"P1\", 4), rep(\"P2\", 4), rep(\"F1\", 4)\n    )\n)\n\n# Create SummarizedExperiment object\nse_rice <- SummarizedExperiment::SummarizedExperiment(\n    assays = list(counts = rice_exp),\n    colData = rice_coldata\n)\n\n# Save object to file\nsave(\n    se_rice, compress = \"xz\",\n    file = here::here(\"data\", \"se_rice.rda\")\n)\n```\n:::\n\n\n## rice_functions.rda\n\nThis object contains a list of 2-column data frames with functional annotation\nfor rice (*Oryza sativa* ssp. japonica). List names are `GO`, `InterPro`,\nand `MapMan`, and each table has columns named `gene` (gene id as in the\ncount matrix in `se_rice`), and `description` (term description).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get a table of tx-to-gene mapping\ntx2gene <- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/IdConversion/id_conversion.osa.csv.gz\",\n    skip = 8, show_col_types = FALSE\n) |>\n    dplyr::filter(id_type == \"tid\") |>\n    dplyr::select(tx = id, gene = `#gene_id`)\n\n# Get functional annotation\n## GO\ngo_df <- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/GO/go.osa.csv.gz\",\n    skip = 8, show_col_types = FALSE\n) |>\n    dplyr::select(gene = `#gene_id`, description) |>\n    inner_join(tx2gene) |>\n    dplyr::select(gene = tx, description)\n\n## InterPro\ninterpro_df <- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/InterPro/interpro.osa.csv.gz\",\n    skip = 8, show_col_types = FALSE\n) |>\n    dplyr::select(gene = `#gene_id`, description) |>\n    inner_join(tx2gene) |>\n    dplyr::select(gene = tx, description)\n\n## MapMan\nmapman_df <- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/MapMan/mapman.osa.csv.gz\",\n    skip = 8, show_col_types = FALSE\n) |>\n    dplyr::select(gene = gene_id, description = desc) |>\n    inner_join(tx2gene) |>\n    dplyr::select(gene = tx, description)\n\n# Create list\nrice_functions <- list(\n    GO = go_df,\n    InterPro = interpro_df,\n    MapMan = mapman_df\n)\n\n# Save object to file\nsave(\n    rice_functions, compress = \"xz\",\n    file = here::here(\"data\", \"rice_functions.rda\")\n)\n```\n:::\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-02-19\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.2   2023-12-11 [1] CRAN (R 4.3.2)\n digest        0.6.34  2024-01-11 [1] CRAN (R 4.3.2)\n evaluate      0.23    2023-11-01 [1] CRAN (R 4.3.2)\n fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.3.2)\n htmltools     0.5.7   2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets   1.6.4   2023-12-06 [1] CRAN (R 4.3.2)\n jsonlite      1.8.8   2023-12-04 [1] CRAN (R 4.3.2)\n knitr         1.45    2023-10-30 [1] CRAN (R 4.3.2)\n rlang         1.1.3   2024-01-10 [1] CRAN (R 4.3.2)\n rmarkdown     2.25    2023-09-18 [1] CRAN (R 4.3.2)\n rstudioapi    0.15.0  2023-07-07 [1] CRAN (R 4.3.2)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.2)\n xfun          0.42    2024-02-08 [1] CRAN (R 4.3.2)\n yaml          2.3.8   2023-12-11 [1] CRAN (R 4.3.2)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}