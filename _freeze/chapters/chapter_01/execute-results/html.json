{
  "hash": "42f4292cdec1b41db18b8759718185e3",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: true\n  warning: false\n---\n\n\n# Benchmark 1: allopolyploid and diploid cotton species under salt stress\n\nHere, we will use __HybridExpress__ on data from @dong2022parental.\nIn this study, authors compared global transcriptomic responses to \nmodest salinity stress in two allotetraploid cotton species\n(*Gossypium hirsutum* and *G. mustelinum*, AD-genome) relative to their \nmodel diploid progenitors (A-genome and D-genome).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loading required packages\nlibrary(HybridExpress)\nlibrary(SummarizedExperiment)\nlibrary(tidyverse)\nlibrary(here)\nlibrary(patchwork)\nlibrary(ComplexHeatmap)\n\nset.seed(123) # for reproducibility\n```\n:::\n\n\n## Data description and experimental design\n\nFirst of all, let's load the data set we will use here and get to know it.\nThe count matrix and sample metadata are stored in a `SummarizedExperiment`\nobject in `data/se_cotton.rda`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the data\nload(here(\"data\", \"se_cotton.rda\"))\n\nse_cotton\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass: SummarizedExperiment \ndim: 37505 24 \nmetadata(0):\nassays(1): counts\nrownames(37505): Gorai.001G000100 Gorai.001G000200 ... Gorai.N028100\n  Gorai.N028200\nrowData names(0):\ncolnames(24): A2_CK1 A2_CK2 ... AD4_Salt2 AD4_Salt3\ncolData names(6): species_name species ... sample rep\n```\n\n\n:::\n\n```{.r .cell-code}\n# Taking a look at the assay\nhead(assay(se_cotton))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 A2_CK1 A2_CK2 A2_CK3 A2_Salt1 A2_Salt2 A2_Salt3 D5_CK1 D5_CK2\nGorai.001G000100    150    158    146       72       67      123      0     28\nGorai.001G000200      0      0      0        0        0        0      1      1\nGorai.001G000300     93    101    107       38       47       59      0     24\nGorai.001G000400      9      8      6        7        9       12      2     46\nGorai.001G000500     80     84     99       50       50       71     87     69\nGorai.001G000600      0      0      0        0        0        0      0      0\n                 D5_CK3 D5_Salt1 D5_Salt2 D5_Salt3 AD1_CK1 AD1_CK2 AD1_CK3\nGorai.001G000100      0        1        0        0      10       7       8\nGorai.001G000200      2        5        3        4      10       4       9\nGorai.001G000300      3        2        2        5      16      14      11\nGorai.001G000400      1        2        2        1      19      19      17\nGorai.001G000500    132      201      154      154     100     102      71\nGorai.001G000600      0        0        0        0       0       0       0\n                 AD1_Salt1 AD1_Salt2 AD1_Salt3 AD4_CK1 AD4_CK2 AD4_CK3\nGorai.001G000100         6         3        11       8      11       7\nGorai.001G000200         2         7         5       0       0       1\nGorai.001G000300         7         9         7       9       4      11\nGorai.001G000400        15        33        18      43      47      41\nGorai.001G000500        86        87       104     103      94      93\nGorai.001G000600         0         0         0       0       0       0\n                 AD4_Salt1 AD4_Salt2 AD4_Salt3\nGorai.001G000100        16         7        19\nGorai.001G000200         1         0         1\nGorai.001G000300         7        10         8\nGorai.001G000400        47        42        50\nGorai.001G000500       141       109       112\nGorai.001G000600         0         0         0\n```\n\n\n:::\n\n```{.r .cell-code}\n# Taking a look at the sample metadata\ncolData(se_cotton) |> as.data.frame()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           species_name species ploidy condition      sample rep\nA2_CK1        Garboreum      A2     di   Control  A2_Control   1\nA2_CK2        Garboreum      A2     di   Control  A2_Control   2\nA2_CK3        Garboreum      A2     di   Control  A2_Control   3\nA2_Salt1      Garboreum      A2     di      Salt     A2_Salt   1\nA2_Salt2      Garboreum      A2     di      Salt     A2_Salt   2\nA2_Salt3      Garboreum      A2     di      Salt     A2_Salt   3\nD5_CK1       Graimondii      D5     di   Control  D5_Control   1\nD5_CK2       Graimondii      D5     di   Control  D5_Control   2\nD5_CK3       Graimondii      D5     di   Control  D5_Control   3\nD5_Salt1     Graimondii      D5     di      Salt     D5_Salt   1\nD5_Salt2     Graimondii      D5     di      Salt     D5_Salt   2\nD5_Salt3     Graimondii      D5     di      Salt     D5_Salt   3\nAD1_CK1   Ghirsutum_TM1     AD1   allo   Control AD1_Control   1\nAD1_CK2   Ghirsutum_TM1     AD1   allo   Control AD1_Control   2\nAD1_CK3   Ghirsutum_TM1     AD1   allo   Control AD1_Control   3\nAD1_Salt1 Ghirsutum_TM1     AD1   allo      Salt    AD1_Salt   1\nAD1_Salt2 Ghirsutum_TM1     AD1   allo      Salt    AD1_Salt   2\nAD1_Salt3 Ghirsutum_TM1     AD1   allo      Salt    AD1_Salt   3\nAD4_CK1     Gmustelinum     AD4   allo   Control AD4_Control   1\nAD4_CK2     Gmustelinum     AD4   allo   Control AD4_Control   2\nAD4_CK3     Gmustelinum     AD4   allo   Control AD4_Control   3\nAD4_Salt1   Gmustelinum     AD4   allo      Salt    AD4_Salt   1\nAD4_Salt2   Gmustelinum     AD4   allo      Salt    AD4_Salt   2\nAD4_Salt3   Gmustelinum     AD4   allo      Salt    AD4_Salt   3\n```\n\n\n:::\n:::\n\n\nHere, we have two hybrid triplets: AD1 (allotetraploid) and its parents \nA2 and D5 (diploids); and AD4 (allotetraploid) and its parents A2 and D5 \n(diploids). We also have two conditions: salt stress, and control. \nGiven this experimental design, we will perform comparative transcriptomic \nanalyses for the each triplet separately. For each triplet, we will compare \nthe expression of the allotetraploid with its diploid parents for\ncontrol and stress conditions separately. In summary, the\ncomparisons will be:\n\n1. A2 <-> AD1 <-> D5, control\n2. A2 <-> AD4 <-> D5, control\n3. A2 <-> AD1 <-> D5, salt stress\n4. A2 <-> AD4 <-> D5, salt stress\n\nThat said, let's create subsets of our data set accordingly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get triplets for each allotetraploid species\nse_ad1 <- se_cotton[, se_cotton$species %in% c(\"A2\", \"D5\", \"AD1\")]\nse_ad4 <- se_cotton[, se_cotton$species %in% c(\"A2\", \"D5\", \"AD4\")]\n```\n:::\n\n\n## Data processing\n\nHere, we will first remove non-expressed genes (sum of counts <10 across\nall samples). Then, we will add midparent expression values to each set, and \nnormalize count data by library size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove non-expressed genes\nse_ad1 <- se_ad1[rowSums(assay(se_ad1)) >= 10, ]\nse_ad4 <- se_ad4[rowSums(assay(se_ad4)) >= 10, ]\n\n# Add midparent expression\n## AD1\nse_ad1 <- add_midparent_expression(\n    se_ad1,\n    coldata_column = \"species\",\n    parent1 = \"A2\",\n    parent2 = \"D5\"\n)\n\n## AD4\nse_ad4 <- add_midparent_expression(\n    se_ad4,\n    coldata_column = \"species\",\n    parent1 = \"A2\",\n    parent2 = \"D5\"\n)\n\n# Normalize data by library size\nse_ad1 <- add_size_factors(se_ad1)\nse_ad4 <- add_size_factors(se_ad4)\n```\n:::\n\n\n## Exploratory data analyses\n\nNow, we will perform exploratory data analyses to check if samples group\ntogether as expected. We will first explore sample clustering with PCA plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot PCA\n## AD1\nse_ad1$species[is.na(se_ad1$species)] <- \"midparent\"\nse_ad1$species[is.na(se_ad1$species)] <- \"midparent\"\n\nse_ad1$condition[is.na(se_ad1$condition)] <- \"-\"\nse_ad1$condition[is.na(se_ad1$condition)] <- \"-\"\n\np_pca1 <- pca_plot(\n    se_ad1, color_by = \"species\", shape_by = \"condition\", add_mean = TRUE\n) + labs(\n    title = \"PCA of samples - AD1\",\n    color = \"Species\",\n    shape = \"Treatment\"\n)\n\n## AD4\nse_ad4$species[is.na(se_ad4$species)] <- \"midparent\"\nse_ad4$species[is.na(se_ad4$species)] <- \"midparent\"\n\nse_ad4$condition[is.na(se_ad4$condition)] <- \"-\"\nse_ad4$condition[is.na(se_ad4$condition)] <- \"-\"\n\np_pca2 <- pca_plot(\n    se_ad4, color_by = \"species\", shape_by = \"condition\", add_mean = TRUE\n) +\n    labs(\n        title = \"PCA of samples - AD4\",\n        color = \"Species\",\n        shape = \"Treatment\"\n    )\n\n# Combining plots\np_pca_combined <- patchwork::wrap_plots(\n    p_pca1 + \n        theme(legend.position = \"bottom\", legend.box = \"vertical\"), \n    p_pca2 + \n        theme(legend.position = \"bottom\", legend.box = \"vertical\"),\n    nrow = 1\n)\n\np_pca_combined\n```\n\n::: {.cell-output-display}\n![](chapter_01_files/figure-html/unnamed-chunk-4-1.png){width=768}\n:::\n:::\n\n\nNow, let's visualize a heatmap of sample correlations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Heatmap of sample correlations\n## AD1\np_hm1 <- plot_samplecor(\n    se_ad1, coldata_cols = c(\"species\", \"condition\"),\n    show_rownames = FALSE\n)\np_hm1@column_title <- \"AD1\"\n\n## AD4\np_hm2 <- plot_samplecor(\n    se_ad4, coldata_cols = c(\"species\", \"condition\"),\n    show_rownames = FALSE\n)\np_hm2@column_title <- \"AD4\"\n\n# Combine plots - one per row\npatchwork::wrap_plots(\n    ggplotify::as.ggplot(p_hm1), \n    ggplotify::as.ggplot(p_hm2), \n    nrow = 2\n)\n```\n\n::: {.cell-output-display}\n![](chapter_01_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nBoth plots show that one sample - D5_CK2 - is an outlier. Let's remove this\nsample.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove sample D5_CK2 and midparent values\nfse_ad1 <- se_ad1[, colnames(se_ad1) != \"D5_CK2\" & se_ad1$species != \"midparent\"]\nfse_ad4 <- se_ad4[, colnames(se_ad4) != \"D5_CK2\" & se_ad4$species != \"midparent\"]\n```\n:::\n\n\n## Identifying differentially expressed genes between species pairs\n\nHere, we will identify differentially expressed genes (DEGs) between\npairwise combinations of species in a triplet. For each hybrid, we will do this\nseparately for stress and control samples. We will also recompute midparent\nvalues specifically for control and stress samples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get DEGs\n## AD1\ndeg_ad1_control <- add_midparent_expression(\n    fse_ad1[, fse_ad1$condition == \"Control\"],\n    coldata_column = \"species\",\n    parent1 = \"A2\",\n    parent2 = \"D5\"\n) |>\n    add_size_factors() |>\n    get_deg_list(\n        coldata_column = \"species\",\n        parent1 = \"A2\",\n        parent2 = \"D5\",\n        offspring = \"AD1\",\n        lfcThreshold = 1\n    )\n\ndeg_ad1_stress <- add_midparent_expression(\n    fse_ad1[, fse_ad1$condition == \"Salt\"],\n    coldata_column = \"species\",\n    parent1 = \"A2\",\n    parent2 = \"D5\"\n) |>\n    add_size_factors() |>\n    get_deg_list(\n        coldata_column = \"species\",\n        parent1 = \"A2\",\n        parent2 = \"D5\",\n        offspring = \"AD1\",\n        lfcThreshold = 1\n    )\n\n## AD4\ndeg_ad4_control <- add_midparent_expression(\n    fse_ad4[, fse_ad4$condition == \"Control\"],\n    coldata_column = \"species\",\n    parent1 = \"A2\",\n    parent2 = \"D5\"\n) |>\n    add_size_factors() |>\n    get_deg_list(\n        coldata_column = \"species\",\n        parent1 = \"A2\",\n        parent2 = \"D5\",\n        offspring = \"AD4\",\n        lfcThreshold = 1\n    )\n\ndeg_ad4_stress <- add_midparent_expression(\n    fse_ad4[, fse_ad4$condition == \"Salt\"],\n    coldata_column = \"species\",\n    parent1 = \"A2\",\n    parent2 = \"D5\"\n) |>\n    add_size_factors() |>\n    get_deg_list(\n        coldata_column = \"species\",\n        parent1 = \"A2\",\n        parent2 = \"D5\",\n        offspring = \"AD4\",\n        lfcThreshold = 1\n    )\n```\n:::\n\n\nNext, we will visualize the frequencies of DEGs with an expression triangle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot expression triangle\n## AD1\np_triangle_ad1_control <- get_deg_counts(deg_ad1_control) |>\n    plot_expression_triangle(\n        box_labels = c(\"A2\", \"D5\", \"AD1\", \"Midparent\")\n    ) +\n    labs(title = \"Control\") +\n    theme(plot.title = element_text(hjust = 0.5))\n\np_triangle_ad1_stress <- get_deg_counts(deg_ad1_stress) |>\n    plot_expression_triangle(\n        box_labels = c(\"A2\", \"D5\", \"AD1\", \"Midparent\")\n    ) +\n    labs(title = \"Stress\") +\n    theme(plot.title = element_text(hjust = 0.5))\n\n\n## AD4\np_triangle_ad4_control <- get_deg_counts(deg_ad4_control) |>\n    plot_expression_triangle(\n        box_labels = c(\"A2\", \"D5\", \"AD4\", \"Midparent\"),\n        palette = c(\"dodgerblue3\", \"firebrick\", \"darkgoldenrod\", \"darkgoldenrod3\")\n    ) +\n    labs(title = \"Control\") +\n    theme(plot.title = element_text(hjust = 0.5))\n\n\np_triangle_ad4_stress <- get_deg_counts(deg_ad4_stress) |>\n    plot_expression_triangle(\n        box_labels = c(\"A2\", \"D5\", \"AD4\", \"Midparent\"),\n        palette = c(\"dodgerblue3\", \"firebrick\", \"darkgoldenrod\", \"darkgoldenrod3\")\n    ) +\n    labs(title = \"Stress\") +\n    theme(plot.title = element_text(hjust = 0.5))\n\n\n# Combine plots\np_triangle_all <- wrap_plots(\n    p_triangle_ad1_control,\n    p_triangle_ad1_stress,\n    p_triangle_ad4_control,\n    p_triangle_ad4_stress,\n    nrow = 2\n) +\n    plot_annotation(tag_levels = \"A\") &\n    theme(plot.tag = element_text(size = 16))\n\np_triangle_all\n```\n\n::: {.cell-output-display}\n![](chapter_01_files/figure-html/unnamed-chunk-8-1.png){width=3900}\n:::\n:::\n\n\nThe figure shows two interesting patterns:\n\n1. In both hybrids and conditions, the number of differentially expressed\ngenes is greater for the hybrids and the D subgenome as compared to the hybrids\nand the A subgenome. However, such difference is greatly reduced under salt\nstress.\n\n2. Overall, salt stress induces an increase in the number of differentially\nexpressed genes relative to both progenitor species.\n\n\nNext, to better understand the effect of salt stress on subgenome expression\nbias, we will check if the differentially expressed genes between the hybrids\nand the parents are the same in control and stress conditions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# UpSet plot for AD1 \nad1 <- list(\n    `A, control` = rownames(deg_ad1_control$F1_vs_P1),\n    `D, control` = rownames(deg_ad1_control$F1_vs_P2),\n    `A, stress` = rownames(deg_ad1_stress$F1_vs_P1),\n    `D, stress` = rownames(deg_ad1_stress$F1_vs_P2)\n)\nm_ad1 <- ComplexHeatmap::make_comb_mat(ad1)\n\np_upset_ad1 <- ComplexHeatmap::UpSet(\n    m_ad1, row_title = \"AD1\",\n    comb_col = ggsci::pal_jama()(7)[comb_degree(m_ad1)],\n    top_annotation = upset_top_annotation(m_ad1, add_numbers = TRUE),\n    set_order = c(\"A, control\", \"A, stress\", \"D, control\", \"D, stress\")\n)\n\n# UpSet plot for AD4 \nad4 <- list(\n    `A, control` = rownames(deg_ad4_control$F1_vs_P1),\n    `D, control` = rownames(deg_ad4_control$F1_vs_P2),\n    `A, stress` = rownames(deg_ad4_stress$F1_vs_P1),\n    `D, stress` = rownames(deg_ad4_stress$F1_vs_P2)\n)\nm_ad4 <- ComplexHeatmap::make_comb_mat(ad4)\n\np_upset_ad4 <- ComplexHeatmap::UpSet(\n    m_ad4, row_title = \"AD4\",\n    comb_col = ggsci::pal_jama()(7)[comb_degree(m_ad4)],\n    top_annotation = upset_top_annotation(m_ad4, add_numbers = TRUE),\n    set_order = c(\"A, control\", \"A, stress\", \"D, control\", \"D, stress\")\n)\n\n# Combine UpSet plots into a single, side-by-side plot\np_upset_all <- wrap_plots(\n    ggplotify::as.ggplot(p_upset_ad1), \n    ggplotify::as.ggplot(p_upset_ad4),\n    nrow = 1\n) +\n    plot_annotation(\n        title = \"Shared DEGs across conditions and hybrids\"\n    ) &\n    theme(plot.title = element_text(hjust = 0.5))\n\np_upset_all\n```\n\n::: {.cell-output-display}\n![](chapter_01_files/figure-html/unnamed-chunk-9-1.png){width=1152}\n:::\n:::\n\n\nInterestingly, a large number of genes are differentially expressed\nbetween the hybrid and the parental genomes for both species (N = 2203 and\n2703 for AD1 and AD4, respectively). For DEGs relative to the D subgenome,\nmost of them are shared between control and stress conditions, while for DEGs\nrelative to the A subgenome, most genes are only differentially expressed under\nsalt stress.\n\n## Classifying genes into expression groups\n\nTo understand the expression patterns of hybrids relative to their progenitors,\nwe will classify genes onto expression-based categories and classes\nas in @rapp2009genomic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Classify genes in expression partitions (classes and categories)\npartition_ad1_control <- expression_partitioning(deg_ad1_control)\npartition_ad4_control <- expression_partitioning(deg_ad4_control)\n\npartition_ad1_stress <- expression_partitioning(deg_ad1_stress)\npartition_ad4_stress <- expression_partitioning(deg_ad4_stress)\n```\n:::\n\n\nNow, let's visualize results:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# AD1\np_pfreq_ad1_c <- plot_partition_frequencies(\n    partition_ad1_control, group_by = \"Class\", labels = c(\"A2\", \"AD1\", \"D5\")\n)\n\np_pfreq_ad1_s <- plot_partition_frequencies(\n    partition_ad1_stress, group_by = \"Class\", labels = c(\"A2\", \"AD1\", \"D5\")\n)\n\n# AD4\np_pfreq_ad4_c <- plot_partition_frequencies(\n    partition_ad4_control, group_by = \"Class\", labels = c(\"A2\", \"AD4\", \"D5\")\n)\n\np_pfreq_ad4_s <- plot_partition_frequencies(\n    partition_ad4_stress, group_by = \"Class\", labels = c(\"A2\", \"AD4\", \"D5\")\n)\n\n# Combine plots\n## Layout: scheme + ((AD1_control + AD1_stress) / (AD4_control + AD4_stress))\np_freq_combined <- wrap_plots(\n    p_pfreq_ad1_c[[1]],\n    wrap_plots(\n        p_pfreq_ad1_c[[2]] + labs(subtitle = \"AD1, control\", x = NULL), \n        p_pfreq_ad1_s[[2]] + labs(subtitle = \"AD1, stress\", x = NULL),\n        p_pfreq_ad4_c[[2]] + labs(subtitle = \"AD4, control\", x = NULL), \n        p_pfreq_ad4_s[[2]] + labs(subtitle = \"AD4, stress\", x = NULL),\n        nrow = 2, ncol = 2\n    ),\n    ncol = 2,\n    widths = c(1, 2)\n) &\n    theme(plot.margin = unit(c(1, 1, 1, 1), \"pt\"))\n\np_freq_combined\n```\n\n::: {.cell-output-display}\n![](chapter_01_files/figure-html/unnamed-chunk-11-1.png){width=864}\n:::\n:::\n\n\nThe figure shows that most genes display expression-level dominance towards \nthe parent 1 (A2) in control and stress conditions, both for the AD1 and AD2\nallopolyploids. However, for both species, such expression-level dominance\nis reduced under salt stress.\n\n## Overrepresentation analyses\n\nNow, we will perform overrepresentation analyses of GO terms among genes \nin each expression class in each condition and species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load GO annotation\nload(here(\"data\", \"cotton_functions.rda\"))\n\n# Perform ORA\n## AD1, control\ngenes_ad1_c <- split(partition_ad1_control$Gene, partition_ad1_control$Class)\nora_ad1_c <- lapply(\n    genes_ad1_c, ora,\n    annotation = bind_rows(cotton_functions), \n    background = rownames(se_ad1),\n    min_setsize = 1, max_setsize = 1000\n)\n\n## AD1, stress\ngenes_ad1_s <- split(partition_ad1_stress$Gene, partition_ad1_stress$Class)\nora_ad1_s <- lapply(\n    genes_ad1_s, ora,\n    annotation = bind_rows(cotton_functions), \n    background = rownames(se_ad1),\n    min_setsize = 1, max_setsize = 1000\n)\n\n## AD4, control\ngenes_ad4_c <- split(partition_ad4_control$Gene, partition_ad4_control$Class)\nora_ad4_c <- lapply(\n    genes_ad4_c, ora,\n    annotation = bind_rows(cotton_functions), \n    background = rownames(se_ad4),\n    min_setsize = 1, max_setsize = 1000\n)\n\n\n## AD4, stress\ngenes_ad4_s <- split(partition_ad4_stress$Gene, partition_ad4_stress$Class)\nora_ad4_s <- lapply(\n    genes_ad4_s, ora,\n    annotation = bind_rows(cotton_functions), \n    background = rownames(se_ad4),\n    min_setsize = 1, max_setsize = 1000\n)\n\n# Checking results\nbind_rows(\n    bind_rows(ora_ad1_c, .id = \"Class\") |> mutate(group = \"AD1_control\"),\n    bind_rows(ora_ad1_s, .id = \"Class\") |> mutate(group = \"AD1_stress\"),\n    bind_rows(ora_ad4_c, .id = \"Class\") |> mutate(group = \"AD4_control\"),\n    bind_rows(ora_ad4_s, .id = \"Class\") |> mutate(group = \"AD4_stress\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Class    term     genes    all      pval     padj     category group   \n<0 rows> (or 0-length row.names)\n```\n\n\n:::\n:::\n\n\nWe found no enriched terms among expression-based classes. Let's try\nthe same for categories.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform ORA\n## AD1, control\ngenes_ad1_c <- split(partition_ad1_control$Gene, partition_ad1_control$Category)\nora_ad1_c <- lapply(\n    genes_ad1_c, ora,\n    annotation = bind_rows(cotton_functions), \n    background = rownames(se_ad1),\n    min_setsize = 1, max_setsize = 1000\n)\n\n## AD1, stress\ngenes_ad1_s <- split(partition_ad1_stress$Gene, partition_ad1_stress$Category)\nora_ad1_s <- lapply(\n    genes_ad1_s, ora,\n    annotation = bind_rows(cotton_functions), \n    background = rownames(se_ad1),\n    min_setsize = 1, max_setsize = 1000\n)\n\n## AD4, control\ngenes_ad4_c <- split(partition_ad4_control$Gene, partition_ad4_control$Category)\nora_ad4_c <- lapply(\n    genes_ad4_c, ora,\n    annotation = bind_rows(cotton_functions), \n    background = rownames(se_ad4),\n    min_setsize = 1, max_setsize = 1000\n)\n\n\n## AD4, stress\ngenes_ad4_s <- split(partition_ad4_stress$Gene, partition_ad4_stress$Category)\nora_ad4_s <- lapply(\n    genes_ad4_s, ora,\n    annotation = bind_rows(cotton_functions), \n    background = rownames(se_ad4),\n    min_setsize = 1, max_setsize = 1000\n)\n\n# Checking results\nbind_rows(\n    bind_rows(ora_ad1_c, .id = \"Category\") |> mutate(group = \"AD1_control\"),\n    bind_rows(ora_ad1_s, .id = \"Category\") |> mutate(group = \"AD1_stress\"),\n    bind_rows(ora_ad4_c, .id = \"Category\") |> mutate(group = \"AD4_control\"),\n    bind_rows(ora_ad4_s, .id = \"Category\") |> mutate(group = \"AD4_stress\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Category term     genes    all      pval     padj     category group   \n<0 rows> (or 0-length row.names)\n```\n\n\n:::\n:::\n\n\nOnce again, we did not find any enriched terms. This could be due to biological\nfactors (e.g., genes that display expression-level dominance towards one\nof the parents do not necessarily belong to the same pathway or functional\ngroup), or technical (e.g., a low quality functional annotation for\n*G. raimondii*, especially considering that much of the high-quality\nfunctional annotation data come from experimental validation).\n\n## Saving important objects {.unnumbered}\n\nLastly, we will save important objects to files, so that they can be reused \nlater.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plots\nsave(\n    p_freq_combined, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_freq_combined.rda\")\n)\n\nsave(\n    p_upset_all, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_upset_all.rda\")\n)\n\nsave(\n    p_pca_combined, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_pca_combined.rda\")\n)\n\nsave(\n    p_triangle_all, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_triangle_all.rda\")\n)\n\npartition_tables <- list(\n    AD1_control = partition_ad1_control,\n    AD1_stress = partition_ad1_stress,\n    AD4_control = partition_ad4_control,\n    AD4_stress = partition_ad4_stress\n)\n\n# Objects\nsave(\n    partition_tables, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"partition_tables.rda\")\n)\n```\n:::\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-02-19\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.2)\n Biobase              * 2.62.0    2023-10-24 [1] Bioconductor\n BiocGenerics         * 0.48.1    2023-11-01 [1] Bioconductor\n BiocParallel           1.37.0    2024-01-19 [1] Github (Bioconductor/BiocParallel@79a1b2d)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.2)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.2)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.2)\n cli                    3.6.2     2023-12-11 [1] CRAN (R 4.3.2)\n clue                   0.3-65    2023-09-23 [1] CRAN (R 4.3.2)\n cluster                2.1.5     2023-11-27 [4] CRAN (R 4.3.2)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.2)\n ComplexHeatmap       * 2.18.0    2023-10-24 [1] Bioconductor\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.2)\n DelayedArray           0.28.0    2023-10-24 [1] Bioconductor\n DESeq2                 1.42.0    2023-10-24 [1] Bioconductor\n digest                 0.6.34    2024-01-11 [1] CRAN (R 4.3.2)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.2)\n dplyr                * 1.1.4     2023-11-17 [1] CRAN (R 4.3.2)\n evaluate               0.23      2023-11-01 [1] CRAN (R 4.3.2)\n fansi                  1.0.6     2023-12-08 [1] CRAN (R 4.3.2)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.2)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.2)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.2)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.2)\n fs                     1.6.3     2023-07-20 [1] CRAN (R 4.3.2)\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.2)\n GenomeInfoDb         * 1.38.6    2024-02-08 [1] Bioconductor 3.18 (R 4.3.2)\n GenomeInfoDbData       1.2.11    2023-12-21 [1] Bioconductor\n GenomicRanges        * 1.54.1    2023-10-29 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.2)\n ggplot2              * 3.4.4     2023-10-12 [1] CRAN (R 4.3.2)\n ggplotify              0.1.2     2023-08-09 [1] CRAN (R 4.3.2)\n ggsci                  3.0.0     2023-03-08 [1] CRAN (R 4.3.2)\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.2)\n glue                   1.7.0     2024-01-09 [1] CRAN (R 4.3.2)\n gridGraphics           0.5-1     2020-12-13 [1] CRAN (R 4.3.2)\n gtable                 0.3.4     2023-08-21 [1] CRAN (R 4.3.2)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.2)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.2)\n htmltools              0.5.7     2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets            1.6.4     2023-12-06 [1] CRAN (R 4.3.2)\n HybridExpress        * 0.99.0    2024-02-15 [1] Bioconductor\n IRanges              * 2.36.0    2023-10-24 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.2)\n jsonlite               1.8.8     2023-12-04 [1] CRAN (R 4.3.2)\n knitr                  1.45      2023-10-30 [1] CRAN (R 4.3.2)\n labeling               0.4.3     2023-08-29 [1] CRAN (R 4.3.2)\n lattice                0.22-5    2023-10-24 [4] CRAN (R 4.3.1)\n lifecycle              1.0.4     2023-11-07 [1] CRAN (R 4.3.2)\n locfit                 1.5-9.8   2023-06-11 [1] CRAN (R 4.3.2)\n lubridate            * 1.9.3     2023-09-27 [1] CRAN (R 4.3.2)\n magick                 2.8.2     2023-12-20 [1] CRAN (R 4.3.2)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.2)\n Matrix                 1.6-3     2023-11-14 [4] CRAN (R 4.3.2)\n MatrixGenerics       * 1.14.0    2023-10-24 [1] Bioconductor\n matrixStats          * 1.2.0     2023-12-11 [1] CRAN (R 4.3.2)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.2)\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.2)\n patchwork            * 1.2.0     2024-01-08 [1] CRAN (R 4.3.2)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.2)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.2)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.2)\n purrr                * 1.0.2     2023-08-10 [1] CRAN (R 4.3.2)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.2)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.2)\n Rcpp                   1.0.12    2024-01-09 [1] CRAN (R 4.3.2)\n RCurl                  1.98-1.14 2024-01-09 [1] CRAN (R 4.3.2)\n readr                * 2.1.5     2024-01-10 [1] CRAN (R 4.3.2)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.2)\n rlang                  1.1.3     2024-01-10 [1] CRAN (R 4.3.2)\n rmarkdown              2.25      2023-09-18 [1] CRAN (R 4.3.2)\n rprojroot              2.0.4     2023-11-05 [1] CRAN (R 4.3.2)\n rstudioapi             0.15.0    2023-07-07 [1] CRAN (R 4.3.2)\n S4Arrays               1.2.0     2023-10-24 [1] Bioconductor\n S4Vectors            * 0.40.2    2023-11-23 [1] Bioconductor 3.18 (R 4.3.2)\n scales                 1.3.0     2023-11-28 [1] CRAN (R 4.3.2)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.2)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.2)\n SparseArray            1.2.4     2024-02-11 [1] Bioconductor 3.18 (R 4.3.2)\n stringi                1.8.3     2023-12-11 [1] CRAN (R 4.3.2)\n stringr              * 1.5.1     2023-11-14 [1] CRAN (R 4.3.2)\n SummarizedExperiment * 1.32.0    2023-10-24 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.2)\n tidyr                * 1.3.1     2024-01-24 [1] CRAN (R 4.3.2)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.2)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.2)\n timechange             0.3.0     2024-01-18 [1] CRAN (R 4.3.2)\n tzdb                   0.4.0     2023-05-12 [1] CRAN (R 4.3.2)\n utf8                   1.2.4     2023-10-22 [1] CRAN (R 4.3.2)\n vctrs                  0.6.5     2023-12-01 [1] CRAN (R 4.3.2)\n withr                  3.0.0     2024-01-16 [1] CRAN (R 4.3.2)\n xfun                   0.42      2024-02-08 [1] CRAN (R 4.3.2)\n XVector                0.42.0    2023-10-24 [1] Bioconductor\n yaml                   2.3.8     2023-12-11 [1] CRAN (R 4.3.2)\n yulab.utils            0.1.4     2024-01-28 [1] CRAN (R 4.3.2)\n zlibbioc               1.48.0    2023-10-24 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [
      "chapter_01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}