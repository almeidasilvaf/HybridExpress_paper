{
  "hash": "188a7141abc5ecaa0fed899d8399ef0b",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: true\n  warning: false\n---\n\n\n# Benchmark 2: transcriptomic analyses of heterosis in rice root traits\n\nHere, we will use __HybridExpress__ on data from @zhai2013transcriptome.\nIn this study, authors sequenced the transcriptomes of the super-hybrid\nrice variety Xieyou 9308 and its parents at tillering and heading\nstages to understand the molecular basis of heterosis (i.e., superior\nperformance of hybrids compared to parents) in root traits.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(HybridExpress)\nlibrary(SummarizedExperiment)\nlibrary(ComplexHeatmap)\nlibrary(tidyverse)\nlibrary(patchwork)\n\nset.seed(123) # for reproducibility\n```\n:::\n\n\n## Data description and experimental design\n\nWe will start by loading the data set, which is stored in \na `SummarizedExperiment` object with a count matrix and sample metadata.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the data\nload(here(\"data\", \"se_rice.rda\"))\n\nse_rice\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass: SummarizedExperiment \ndim: 42081 12 \nmetadata(0):\nassays(1): counts\nrownames(42081): Os01t0100100-01 Os01t0100200-01 ... Os12t0641500-03\n  Os12t0641600-01\nrowData names(0):\ncolnames(12): R1 R2 ... F3 F4\ncolData names(3): Line Stage Generation\n```\n\n\n:::\n\n```{.r .cell-code}\n# Taking a look at the assay\nhead(assay(se_rice))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 R1  R2  R3  R4  X1  X2  X3  X4  F1  F2  F3  F4\nOs01t0100100-01 397 685 247 332 372 348 489 414 257 420 225 262\nOs01t0100200-01   7  21  14   8   9   2  10  15   3   9   8  12\nOs01t0100400-01  90 195  81  54 141  56 114  91 110 345  52  68\nOs01t0100500-01 436 571 324 315 418 353 509 516 280 371 289 276\nOs01t0100600-01 264 443 191 300 211 249 345 360 215 195 206 162\nOs01t0100650-00  12   3   3   2  12  13  39   2   0   2   0  14\n```\n\n\n:::\n\n```{.r .cell-code}\n# Taking a look at the sample metadata\ncolData(se_rice) |> as.data.frame()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           Line     Stage Generation\nR1        R9308 Tillering         P1\nR2        R9308 Tillering         P1\nR3        R9308   Heading         P1\nR4        R9308   Heading         P1\nX1 Xieqingzao B Tillering         P2\nX2 Xieqingzao B Tillering         P2\nX3 Xieqingzao B   Heading         P2\nX4 Xieqingzao B   Heading         P2\nF1  Xieyou 9308 Tillering         F1\nF2  Xieyou 9308 Tillering         F1\nF3  Xieyou 9308   Heading         F1\nF4  Xieyou 9308   Heading         F1\n```\n\n\n:::\n:::\n\n\nAs we can see in the sample metadata, for each stage (tillering and heading),\ntwo replicates were obtained for each generation (parents and hybrid).\nLine Xieyou 9308 represents the hybrid, while lines R9308 and Xieqingzao B\nrepresent the parents 1 and 2, respectively. Given this experimental design,\nwe will perform comparative analyses separately for each stage. Thus, our\ntriplets will be:\n\n1. R9308 <-> Xieyou 9308 <-> Xieqingzao B, heading stage\n2. R9308 <-> Xieyou 9308 <-> Xieqingzao B, tillering\n\nLet's subset the data accordingly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get triplets for each stage\nse_h <- se_rice[, se_rice$Stage == \"Heading\"]\nse_t <- se_rice[, se_rice$Stage == \"Tillering\"]\n```\n:::\n\n\n## Data processing\n\nHere, we will first remove non-expressed genes (sum of counts <10 across\nall samples). Then, we will add midparent expression values to each set, and \nnormalize count data by library size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove non-expressed genes\nse_h <- se_h[rowSums(assay(se_h)) >= 10, ]\nse_t <- se_t[rowSums(assay(se_t)) >= 10, ]\n\n# Add midparent expression\nse_h <- add_midparent_expression(se_h)\nse_t <- add_midparent_expression(se_t)\n\n# Normalize data by library size\nse_h <- add_size_factors(se_h)\nse_t <- add_size_factors(se_t)\n```\n:::\n\n\n## Exploratory data analyses\n\nNow, we will perform exploratory data analyses to check if samples group\ntogether as expected. We will first explore sample clustering with PCA plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot PCA for each stage separately\np_pca_h <- pca_plot(se_h, color_by = \"Generation\", add_mean = TRUE) + \n    labs(title = \"PCA of samples - Heading stage\")\n\np_pca_t <- pca_plot(se_t, color_by = \"Generation\", add_mean = TRUE) + \n    labs(title = \"PCA of samples - Tillering stage\")\n\n# Combine plots\np_pca_combined <- patchwork::wrap_plots(\n    p_pca_h + theme(legend.position = \"bottom\", legend.box = \"vertical\"), \n    p_pca_t + theme(legend.position = \"bottom\", legend.box = \"vertical\"),\n    nrow = 1\n) +\n    plot_layout(guides = \"collect\") &\n    theme(legend.position = \"bottom\")\n\np_pca_combined\n```\n\n::: {.cell-output-display}\n![](chapter_02_files/figure-html/unnamed-chunk-4-1.png){width=768}\n:::\n:::\n\n\nNow, let's visualize a heatmap of sample correlations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Heatmap of sample correlations\np_hmh <- plot_samplecor(se_h, coldata_cols = \"Generation\", show_rownames = FALSE)\np_hmh@column_title <- \"Heading\"\n\np_hmt <- plot_samplecor(se_t, coldata_cols = \"Generation\", show_rownames = FALSE)\np_hmt@column_title <- \"Tillering\"\n\n# Combine plots - one per row\np_hm_combined <- patchwork::wrap_plots(\n    ggplotify::as.ggplot(p_hmh), \n    ggplotify::as.ggplot(p_hmt), \n    nrow = 2\n)\n\np_hm_combined\n```\n\n::: {.cell-output-display}\n![](chapter_02_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nIn the heading stage, samples group very well by line,\nas demonstrated by both the PCA plot and the heatmap of sample correlations. \nIn the tillering stage, though, there is a lot of within-group variation\nfor the hybrid samples, which is an issue that could probably be mitigated\nby including more replicates. This is something we need to keep in mind\nwhen interpreting results in the following sections.\n\n## Identifying differentially expressed genes in triplets\n\nHere, we will identify differentially expressed genes (DEGs) between\npairwise combinations of lines in a triplet in the heading and tillering\nstages. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get DEGs\ndeg_h <- get_deg_list(se_h, lfcThreshold = 1)\ndeg_t <- get_deg_list(se_t, lfcThreshold = 1)\n```\n:::\n\n\nNext, we will visualize the frequencies of DEGs with an expression triangle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot expression triangle\np_triangle_h <- get_deg_counts(deg_h) |>\n    plot_expression_triangle(\n        box_labels = c(\"R9308\", \"Xieqingzao B\", \"Xieyou 9308\", \"Midparent\")\n    ) +\n    labs(title = \"Heading\") +\n    theme(plot.title = element_text(hjust = 0.5))\n\np_triangle_t <- get_deg_counts(deg_t) |>\n    plot_expression_triangle(\n        box_labels = c(\"R9308\", \"Xieqingzao B\", \"Xieyou 9308\", \"Midparent\")\n    ) +\n    labs(title = \"Tillering\") +\n    theme(plot.title = element_text(hjust = 0.5))\n\n# Combine plots\np_triangle_all <- wrap_plots(\n    p_triangle_h,\n    p_triangle_t,\n    nrow = 1\n) +\n    plot_annotation(tag_levels = \"A\") &\n    theme(plot.tag = element_text(size = 16))\n\np_triangle_all\n```\n\n::: {.cell-output-display}\n![](chapter_02_files/figure-html/unnamed-chunk-7-1.png){width=4500}\n:::\n:::\n\n\nThe triangle plot shows a clear imbalance in the number of DEGs in the hybrid\nrelative both parents, with much more DEGs relative to the Xieqingzao B line\nin the heading stage, and much more DEGs relative to the R9308 line in the\ntillering stage. This results suggest a developmental stage-mediated shift in\nexpression-level dominance, with a bias towards parent R9308 in the heading\nstage, and a bias towards parent Xieqingzao B in the tillering stage.\nHowever, considering the large within-group variance\nfor hybrid samples in the tillering stage, it is not clear whether such shift\nbias is due to true biological differences or an artifact resulting from \nsuch large variances.\n\n\nNext, to better understand the differences and similarities between stages, \nwe will explore the overlap of DEGs between stages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a list of DEGs for each contrast and create a combination matrix\ndeg_sets <- list(\n    `R9308, heading` = rownames(deg_h$F1_vs_P1),\n    `Xieqingzao B, heading` = rownames(deg_h$F1_vs_P2),\n    `R9308, tillering` = rownames(deg_t$F1_vs_P1),\n    `Xieqingzao B, tillering` = rownames(deg_t$F1_vs_P2)\n)\nm <- ComplexHeatmap::make_comb_mat(deg_sets)\n\n# Plot UpSet\np_upset <- ComplexHeatmap::UpSet(\n    m,\n    comb_col = ggsci::pal_jama()(7)[comb_degree(m)],\n    top_annotation = upset_top_annotation(m, add_numbers = TRUE),\n    set_order = names(deg_sets)\n)\n\np_upset\n```\n\n::: {.cell-output-display}\n![](chapter_02_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThe figure shows that, overall, most of the DEGs between the hybrid and parents\nare parent- and stage-specific (e.g., only differentially expressed\nrelative to R9308 in the heading stage). However, we also observed a large \noverlap in DEGs relative to both parents in each stage (N = 286 and 280 for the\nheading and tillering stages, respectively), and a similar but smaller overlap\nexists for DEGs relative to the same parent in different stages (N = 186 and\n217 for lines R9308 and Xieqingziao B, respectively).\n\n\n## Classifying genes into expression groups\n\nTo understand the expression patterns of hybrids relative to their progenitors,\nwe will classify genes onto expression-based categories and classes\nas in @rapp2009genomic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Classify genes in expression partitions (classes and categories)\npartition_h <- expression_partitioning(deg_h)\npartition_t <- expression_partitioning(deg_t)\n```\n:::\n\n\nNow, let's visualize results:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get frequency of genes per class\np_pfreq_h <- plot_partition_frequencies(partition_h, group_by = \"Class\")\np_pfreq_t <- plot_partition_frequencies(partition_t, group_by = \"Class\")\n\n# Combine plots\np_freq_combined <- wrap_plots(\n    p_pfreq_h[[1]],\n    p_pfreq_h[[2]] + labs(subtitle = \"Heading\", x = NULL), \n    p_pfreq_t[[2]] + labs(subtitle = \"Tillering\", x = NULL), \n    nrow = 1, \n    widths = c(1, 2, 2)\n)\n\np_freq_combined\n```\n\n::: {.cell-output-display}\n![](chapter_02_files/figure-html/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\nThe figure shows that most genes (67.51%) display expression-level dominance \n(ELD) towards parent 1 (R9308 line) in the heading stage, which is in line\nwith what we observed in the expression triangle plot. \nHowever, in the tillering stage, most genes (41.24%) display ELD towards \nparent 2 (Xieqingzao B), but large fractions of the genes also display\nELD towards parent 1 (25.78%) and transgressive down-regulation (26.04%),\nagain suggesting a dramatic shift in expression patterns in temporal scale.\n\n## Overrepresentation analyses\n\nNow, we will perform overrepresentation analyses of GO terms among genes \nin each expression class in each stage.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load GO annotation\nload(here(\"data\", \"rice_functions.rda\"))\n\n# Perform ORA\n## Heading\ngenes_h <- split(partition_h$Gene, partition_h$Class)\nora_h <- lapply(\n    genes_h, ora,\n    annotation = bind_rows(rice_functions), \n    background = rownames(se_h),\n    min_setsize = 1, max_setsize = 1000\n)\n\n## Tillering\ngenes_t <- split(partition_t$Gene, partition_t$Class)\nora_t <- lapply(\n    genes_t, ora,\n    annotation = bind_rows(rice_functions), \n    background = rownames(se_t),\n    min_setsize = 1, max_setsize = 1000\n)\n\n# Checking results\nbind_rows(\n    bind_rows(ora_h, .id = \"Class\") |> mutate(group = \"Heading\"),\n    bind_rows(ora_t, .id = \"Class\") |> mutate(group = \"Tillering\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Class    term     genes    all      pval     padj     category group   \n<0 rows> (or 0-length row.names)\n```\n\n\n:::\n:::\n\n\nWe found no enriched terms among expression-based classes. Let's try\nthe same for categories.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform ORA\n## Heading\ngenes_h <- split(partition_h$Gene, partition_h$Category)\nora_h <- lapply(\n    genes_h, ora,\n    annotation = bind_rows(rice_functions), \n    background = rownames(se_h),\n    min_setsize = 1, max_setsize = 1000\n)\n\n## Tillering\ngenes_t <- split(partition_t$Gene, partition_t$Category)\nora_t <- lapply(\n    genes_t, ora,\n    annotation = bind_rows(rice_functions), \n    background = rownames(se_t),\n    min_setsize = 1, max_setsize = 1000\n)\n\n# Checking results\nbind_rows(\n    bind_rows(ora_h, .id = \"Category\") |> mutate(group = \"Heading\"),\n    bind_rows(ora_t, .id = \"Category\") |> mutate(group = \"Tillering\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Category term     genes    all      pval     padj     category group   \n<0 rows> (or 0-length row.names)\n```\n\n\n:::\n:::\n\n\nOnce again, we did not find any enriched terms. This could be due to biological\nfactors (e.g., genes that display expression-level dominance towards one\nof the parents do not necessarily belong to the same pathway or functional\ngroup), or technical (e.g., a low quality functional annotation for\nrice).\n\n## Saving important objects {.unnumbered}\n\nLastly, we will save important objects to files, so that they can be reused \nlater.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plots\np_freq_combined_b2 <- p_freq_combined\nsave(\n    p_freq_combined_b2, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_freq_combined_b2.rda\")\n)\n\np_upset_b2 <- p_upset\nsave(\n    p_upset_b2, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_upset_b2.rda\")\n)\n\np_pca_b2 <- p_pca_combined\nsave(\n    p_pca_b2, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_pca_b2.rda\")\n)\n\np_triangle_b2 <- p_triangle_all\nsave(\n    p_triangle_b2, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_triangle_b2.rda\")\n)\n\npartition_tables_b2 <- list(\n    Heading = partition_h,\n    Tillering = partition_t\n)\n\n# Objects\nsave(\n    partition_tables_b2, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"partition_tables_b2.rda\")\n)\n```\n:::\n\n\n\n## Session info {.unnumbered}\n\nThis document was created under the following conditions:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-02-19\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.2)\n Biobase              * 2.62.0    2023-10-24 [1] Bioconductor\n BiocGenerics         * 0.48.1    2023-11-01 [1] Bioconductor\n BiocParallel           1.37.0    2024-01-19 [1] Github (Bioconductor/BiocParallel@79a1b2d)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.2)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.2)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.2)\n cli                    3.6.2     2023-12-11 [1] CRAN (R 4.3.2)\n clue                   0.3-65    2023-09-23 [1] CRAN (R 4.3.2)\n cluster                2.1.5     2023-11-27 [4] CRAN (R 4.3.2)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.2)\n ComplexHeatmap       * 2.18.0    2023-10-24 [1] Bioconductor\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.2)\n DelayedArray           0.28.0    2023-10-24 [1] Bioconductor\n DESeq2                 1.42.0    2023-10-24 [1] Bioconductor\n digest                 0.6.34    2024-01-11 [1] CRAN (R 4.3.2)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.2)\n dplyr                * 1.1.4     2023-11-17 [1] CRAN (R 4.3.2)\n evaluate               0.23      2023-11-01 [1] CRAN (R 4.3.2)\n fansi                  1.0.6     2023-12-08 [1] CRAN (R 4.3.2)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.2)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.2)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.2)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.2)\n fs                     1.6.3     2023-07-20 [1] CRAN (R 4.3.2)\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.2)\n GenomeInfoDb         * 1.38.6    2024-02-08 [1] Bioconductor 3.18 (R 4.3.2)\n GenomeInfoDbData       1.2.11    2023-12-21 [1] Bioconductor\n GenomicRanges        * 1.54.1    2023-10-29 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.2)\n ggplot2              * 3.4.4     2023-10-12 [1] CRAN (R 4.3.2)\n ggplotify              0.1.2     2023-08-09 [1] CRAN (R 4.3.2)\n ggsci                  3.0.0     2023-03-08 [1] CRAN (R 4.3.2)\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.2)\n glue                   1.7.0     2024-01-09 [1] CRAN (R 4.3.2)\n gridGraphics           0.5-1     2020-12-13 [1] CRAN (R 4.3.2)\n gtable                 0.3.4     2023-08-21 [1] CRAN (R 4.3.2)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.2)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.2)\n htmltools              0.5.7     2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets            1.6.4     2023-12-06 [1] CRAN (R 4.3.2)\n HybridExpress        * 0.99.0    2024-02-15 [1] Bioconductor\n IRanges              * 2.36.0    2023-10-24 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.2)\n jsonlite               1.8.8     2023-12-04 [1] CRAN (R 4.3.2)\n knitr                  1.45      2023-10-30 [1] CRAN (R 4.3.2)\n labeling               0.4.3     2023-08-29 [1] CRAN (R 4.3.2)\n lattice                0.22-5    2023-10-24 [4] CRAN (R 4.3.1)\n lifecycle              1.0.4     2023-11-07 [1] CRAN (R 4.3.2)\n locfit                 1.5-9.8   2023-06-11 [1] CRAN (R 4.3.2)\n lubridate            * 1.9.3     2023-09-27 [1] CRAN (R 4.3.2)\n magick                 2.8.2     2023-12-20 [1] CRAN (R 4.3.2)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.2)\n Matrix                 1.6-3     2023-11-14 [4] CRAN (R 4.3.2)\n MatrixGenerics       * 1.14.0    2023-10-24 [1] Bioconductor\n matrixStats          * 1.2.0     2023-12-11 [1] CRAN (R 4.3.2)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.2)\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.2)\n patchwork            * 1.2.0     2024-01-08 [1] CRAN (R 4.3.2)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.2)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.2)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.2)\n purrr                * 1.0.2     2023-08-10 [1] CRAN (R 4.3.2)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.2)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.2)\n Rcpp                   1.0.12    2024-01-09 [1] CRAN (R 4.3.2)\n RCurl                  1.98-1.14 2024-01-09 [1] CRAN (R 4.3.2)\n readr                * 2.1.5     2024-01-10 [1] CRAN (R 4.3.2)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.2)\n rlang                  1.1.3     2024-01-10 [1] CRAN (R 4.3.2)\n rmarkdown              2.25      2023-09-18 [1] CRAN (R 4.3.2)\n rprojroot              2.0.4     2023-11-05 [1] CRAN (R 4.3.2)\n rstudioapi             0.15.0    2023-07-07 [1] CRAN (R 4.3.2)\n S4Arrays               1.2.0     2023-10-24 [1] Bioconductor\n S4Vectors            * 0.40.2    2023-11-23 [1] Bioconductor 3.18 (R 4.3.2)\n scales                 1.3.0     2023-11-28 [1] CRAN (R 4.3.2)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.2)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.2)\n SparseArray            1.2.4     2024-02-11 [1] Bioconductor 3.18 (R 4.3.2)\n stringi                1.8.3     2023-12-11 [1] CRAN (R 4.3.2)\n stringr              * 1.5.1     2023-11-14 [1] CRAN (R 4.3.2)\n SummarizedExperiment * 1.32.0    2023-10-24 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.2)\n tidyr                * 1.3.1     2024-01-24 [1] CRAN (R 4.3.2)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.2)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.2)\n timechange             0.3.0     2024-01-18 [1] CRAN (R 4.3.2)\n tzdb                   0.4.0     2023-05-12 [1] CRAN (R 4.3.2)\n utf8                   1.2.4     2023-10-22 [1] CRAN (R 4.3.2)\n vctrs                  0.6.5     2023-12-01 [1] CRAN (R 4.3.2)\n withr                  3.0.0     2024-01-16 [1] CRAN (R 4.3.2)\n xfun                   0.42      2024-02-08 [1] CRAN (R 4.3.2)\n XVector                0.42.0    2023-10-24 [1] Bioconductor\n yaml                   2.3.8     2023-12-11 [1] CRAN (R 4.3.2)\n yulab.utils            0.1.4     2024-01-28 [1] CRAN (R 4.3.2)\n zlibbioc               1.48.0    2023-10-24 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n## References {.unnumbered}\n",
    "supporting": [
      "chapter_02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}