[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Code and data for “HybridExpress: an R/Bioconductor package for comparative transcriptomic analyses of hybrids and their progenitors”",
    "section": "",
    "text": "Preface\nThis book contains all code and data used in the paper HybridExpress: an R/Bioconductor package for comparative transcriptomic analyses of hybrids and their progenitors, and it is intended to make all analyses fully reproducible.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html",
    "href": "chapters/chapter_01.html",
    "title": "1  Benchmark 1: allopolyploid and diploid cotton species under salt stress",
    "section": "",
    "text": "1.1 Data description and experimental design\nFirst of all, let’s load the data set we will use here and get to know it. The count matrix and sample metadata are stored in a SummarizedExperiment object in data/se_cotton.rda.\n# Load the data\nload(here(\"data\", \"se_cotton.rda\"))\n\nse_cotton\n\nclass: SummarizedExperiment \ndim: 37505 24 \nmetadata(0):\nassays(1): counts\nrownames(37505): Gorai.001G000100 Gorai.001G000200 ... Gorai.N028100\n  Gorai.N028200\nrowData names(0):\ncolnames(24): A2_CK1 A2_CK2 ... AD4_Salt2 AD4_Salt3\ncolData names(6): species_name species ... sample rep\n\n# Taking a look at the assay\nhead(assay(se_cotton))\n\n                 A2_CK1 A2_CK2 A2_CK3 A2_Salt1 A2_Salt2 A2_Salt3 D5_CK1 D5_CK2\nGorai.001G000100    150    158    146       72       67      123      0     28\nGorai.001G000200      0      0      0        0        0        0      1      1\nGorai.001G000300     93    101    107       38       47       59      0     24\nGorai.001G000400      9      8      6        7        9       12      2     46\nGorai.001G000500     80     84     99       50       50       71     87     69\nGorai.001G000600      0      0      0        0        0        0      0      0\n                 D5_CK3 D5_Salt1 D5_Salt2 D5_Salt3 AD1_CK1 AD1_CK2 AD1_CK3\nGorai.001G000100      0        1        0        0      10       7       8\nGorai.001G000200      2        5        3        4      10       4       9\nGorai.001G000300      3        2        2        5      16      14      11\nGorai.001G000400      1        2        2        1      19      19      17\nGorai.001G000500    132      201      154      154     100     102      71\nGorai.001G000600      0        0        0        0       0       0       0\n                 AD1_Salt1 AD1_Salt2 AD1_Salt3 AD4_CK1 AD4_CK2 AD4_CK3\nGorai.001G000100         6         3        11       8      11       7\nGorai.001G000200         2         7         5       0       0       1\nGorai.001G000300         7         9         7       9       4      11\nGorai.001G000400        15        33        18      43      47      41\nGorai.001G000500        86        87       104     103      94      93\nGorai.001G000600         0         0         0       0       0       0\n                 AD4_Salt1 AD4_Salt2 AD4_Salt3\nGorai.001G000100        16         7        19\nGorai.001G000200         1         0         1\nGorai.001G000300         7        10         8\nGorai.001G000400        47        42        50\nGorai.001G000500       141       109       112\nGorai.001G000600         0         0         0\n\n# Taking a look at the sample metadata\ncolData(se_cotton) |&gt; as.data.frame()\n\n           species_name species ploidy condition      sample rep\nA2_CK1        Garboreum      A2     di   Control  A2_Control   1\nA2_CK2        Garboreum      A2     di   Control  A2_Control   2\nA2_CK3        Garboreum      A2     di   Control  A2_Control   3\nA2_Salt1      Garboreum      A2     di      Salt     A2_Salt   1\nA2_Salt2      Garboreum      A2     di      Salt     A2_Salt   2\nA2_Salt3      Garboreum      A2     di      Salt     A2_Salt   3\nD5_CK1       Graimondii      D5     di   Control  D5_Control   1\nD5_CK2       Graimondii      D5     di   Control  D5_Control   2\nD5_CK3       Graimondii      D5     di   Control  D5_Control   3\nD5_Salt1     Graimondii      D5     di      Salt     D5_Salt   1\nD5_Salt2     Graimondii      D5     di      Salt     D5_Salt   2\nD5_Salt3     Graimondii      D5     di      Salt     D5_Salt   3\nAD1_CK1   Ghirsutum_TM1     AD1   allo   Control AD1_Control   1\nAD1_CK2   Ghirsutum_TM1     AD1   allo   Control AD1_Control   2\nAD1_CK3   Ghirsutum_TM1     AD1   allo   Control AD1_Control   3\nAD1_Salt1 Ghirsutum_TM1     AD1   allo      Salt    AD1_Salt   1\nAD1_Salt2 Ghirsutum_TM1     AD1   allo      Salt    AD1_Salt   2\nAD1_Salt3 Ghirsutum_TM1     AD1   allo      Salt    AD1_Salt   3\nAD4_CK1     Gmustelinum     AD4   allo   Control AD4_Control   1\nAD4_CK2     Gmustelinum     AD4   allo   Control AD4_Control   2\nAD4_CK3     Gmustelinum     AD4   allo   Control AD4_Control   3\nAD4_Salt1   Gmustelinum     AD4   allo      Salt    AD4_Salt   1\nAD4_Salt2   Gmustelinum     AD4   allo      Salt    AD4_Salt   2\nAD4_Salt3   Gmustelinum     AD4   allo      Salt    AD4_Salt   3\nHere, we have two hybrid triplets: AD1 (allotetraploid) and its parents A2 and D5 (diploids); and AD4 (allotetraploid) and its parents A2 and D5 (diploids). We also have two conditions: salt stress, and control. Given this experimental design, we will perform comparative transcriptomic analyses for the each triplet separately. For each triplet, we will compare the expression of the allotetraploid with its diploid parents for control and stress conditions separately. In summary, the comparisons will be:\nThat said, let’s create subsets of our data set accordingly:\n# Get triplets for each allotetraploid species\nse_ad1 &lt;- se_cotton[, se_cotton$species %in% c(\"A2\", \"D5\", \"AD1\")]\nse_ad4 &lt;- se_cotton[, se_cotton$species %in% c(\"A2\", \"D5\", \"AD4\")]",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Benchmark 1: allopolyploid and diploid cotton species under salt stress</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#data-description-and-experimental-design",
    "href": "chapters/chapter_01.html#data-description-and-experimental-design",
    "title": "1  Benchmark 1: allopolyploid and diploid cotton species under salt stress",
    "section": "",
    "text": "A2 &lt;-&gt; AD1 &lt;-&gt; D5, control\nA2 &lt;-&gt; AD4 &lt;-&gt; D5, control\nA2 &lt;-&gt; AD1 &lt;-&gt; D5, salt stress\nA2 &lt;-&gt; AD4 &lt;-&gt; D5, salt stress",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Benchmark 1: allopolyploid and diploid cotton species under salt stress</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#data-processing",
    "href": "chapters/chapter_01.html#data-processing",
    "title": "1  Benchmark 1: allopolyploid and diploid cotton species under salt stress",
    "section": "1.2 Data processing",
    "text": "1.2 Data processing\nHere, we will first remove non-expressed genes (sum of counts &lt;10 across all samples). Then, we will add midparent expression values to each set, and normalize count data by library size.\n\n# Remove non-expressed genes\nse_ad1 &lt;- se_ad1[rowSums(assay(se_ad1)) &gt;= 10, ]\nse_ad4 &lt;- se_ad4[rowSums(assay(se_ad4)) &gt;= 10, ]\n\n# Add midparent expression\n## AD1\nse_ad1 &lt;- add_midparent_expression(\n    se_ad1,\n    coldata_column = \"species\",\n    parent1 = \"A2\",\n    parent2 = \"D5\"\n)\n\n## AD4\nse_ad4 &lt;- add_midparent_expression(\n    se_ad4,\n    coldata_column = \"species\",\n    parent1 = \"A2\",\n    parent2 = \"D5\"\n)\n\n# Normalize data by library size\nse_ad1 &lt;- add_size_factors(se_ad1)\nse_ad4 &lt;- add_size_factors(se_ad4)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Benchmark 1: allopolyploid and diploid cotton species under salt stress</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#exploratory-data-analyses",
    "href": "chapters/chapter_01.html#exploratory-data-analyses",
    "title": "1  Benchmark 1: allopolyploid and diploid cotton species under salt stress",
    "section": "1.3 Exploratory data analyses",
    "text": "1.3 Exploratory data analyses\nNow, we will perform exploratory data analyses to check if samples group together as expected. We will first explore sample clustering with PCA plots.\n\n# Plot PCA\n## AD1\nse_ad1$species[is.na(se_ad1$species)] &lt;- \"midparent\"\nse_ad1$species[is.na(se_ad1$species)] &lt;- \"midparent\"\n\nse_ad1$condition[is.na(se_ad1$condition)] &lt;- \"-\"\nse_ad1$condition[is.na(se_ad1$condition)] &lt;- \"-\"\n\np_pca1 &lt;- pca_plot(\n    se_ad1, color_by = \"species\", shape_by = \"condition\", add_mean = TRUE\n) + labs(\n    title = \"PCA of samples - AD1\",\n    color = \"Species\",\n    shape = \"Treatment\"\n)\n\n## AD4\nse_ad4$species[is.na(se_ad4$species)] &lt;- \"midparent\"\nse_ad4$species[is.na(se_ad4$species)] &lt;- \"midparent\"\n\nse_ad4$condition[is.na(se_ad4$condition)] &lt;- \"-\"\nse_ad4$condition[is.na(se_ad4$condition)] &lt;- \"-\"\n\np_pca2 &lt;- pca_plot(\n    se_ad4, color_by = \"species\", shape_by = \"condition\", add_mean = TRUE\n) +\n    labs(\n        title = \"PCA of samples - AD4\",\n        color = \"Species\",\n        shape = \"Treatment\"\n    )\n\n# Combining plots\np_pca_combined &lt;- patchwork::wrap_plots(\n    p_pca1 + \n        theme(legend.position = \"bottom\", legend.box = \"vertical\"), \n    p_pca2 + \n        theme(legend.position = \"bottom\", legend.box = \"vertical\"),\n    nrow = 1\n)\n\np_pca_combined\n\n\n\n\n\n\n\n\nNow, let’s visualize a heatmap of sample correlations.\n\n# Heatmap of sample correlations\n## AD1\np_hm1 &lt;- plot_samplecor(\n    se_ad1, coldata_cols = c(\"species\", \"condition\"),\n    show_rownames = FALSE\n)\np_hm1@column_title &lt;- \"AD1\"\n\n## AD4\np_hm2 &lt;- plot_samplecor(\n    se_ad4, coldata_cols = c(\"species\", \"condition\"),\n    show_rownames = FALSE\n)\np_hm2@column_title &lt;- \"AD4\"\n\n# Combine plots - one per row\npatchwork::wrap_plots(\n    ggplotify::as.ggplot(p_hm1), \n    ggplotify::as.ggplot(p_hm2), \n    nrow = 2\n)\n\n\n\n\n\n\n\n\nBoth plots show that one sample - D5_CK2 - is an outlier. Let’s remove this sample.\n\n# Remove sample D5_CK2 and midparent values\nfse_ad1 &lt;- se_ad1[, colnames(se_ad1) != \"D5_CK2\" & se_ad1$species != \"midparent\"]\nfse_ad4 &lt;- se_ad4[, colnames(se_ad4) != \"D5_CK2\" & se_ad4$species != \"midparent\"]",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Benchmark 1: allopolyploid and diploid cotton species under salt stress</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#identifying-differentially-expressed-genes-between-species-pairs",
    "href": "chapters/chapter_01.html#identifying-differentially-expressed-genes-between-species-pairs",
    "title": "1  Benchmark 1: allopolyploid and diploid cotton species under salt stress",
    "section": "1.4 Identifying differentially expressed genes between species pairs",
    "text": "1.4 Identifying differentially expressed genes between species pairs\nHere, we will identify differentially expressed genes (DEGs) between pairwise combinations of species in a triplet. For each hybrid, we will do this separately for stress and control samples. We will also recompute midparent values specifically for control and stress samples.\n\n# Get DEGs\n## AD1\ndeg_ad1_control &lt;- add_midparent_expression(\n    fse_ad1[, fse_ad1$condition == \"Control\"],\n    coldata_column = \"species\",\n    parent1 = \"A2\",\n    parent2 = \"D5\"\n) |&gt;\n    add_size_factors() |&gt;\n    get_deg_list(\n        coldata_column = \"species\",\n        parent1 = \"A2\",\n        parent2 = \"D5\",\n        offspring = \"AD1\",\n        lfcThreshold = 1\n    )\n\ndeg_ad1_stress &lt;- add_midparent_expression(\n    fse_ad1[, fse_ad1$condition == \"Salt\"],\n    coldata_column = \"species\",\n    parent1 = \"A2\",\n    parent2 = \"D5\"\n) |&gt;\n    add_size_factors() |&gt;\n    get_deg_list(\n        coldata_column = \"species\",\n        parent1 = \"A2\",\n        parent2 = \"D5\",\n        offspring = \"AD1\",\n        lfcThreshold = 1\n    )\n\n## AD4\ndeg_ad4_control &lt;- add_midparent_expression(\n    fse_ad4[, fse_ad4$condition == \"Control\"],\n    coldata_column = \"species\",\n    parent1 = \"A2\",\n    parent2 = \"D5\"\n) |&gt;\n    add_size_factors() |&gt;\n    get_deg_list(\n        coldata_column = \"species\",\n        parent1 = \"A2\",\n        parent2 = \"D5\",\n        offspring = \"AD4\",\n        lfcThreshold = 1\n    )\n\ndeg_ad4_stress &lt;- add_midparent_expression(\n    fse_ad4[, fse_ad4$condition == \"Salt\"],\n    coldata_column = \"species\",\n    parent1 = \"A2\",\n    parent2 = \"D5\"\n) |&gt;\n    add_size_factors() |&gt;\n    get_deg_list(\n        coldata_column = \"species\",\n        parent1 = \"A2\",\n        parent2 = \"D5\",\n        offspring = \"AD4\",\n        lfcThreshold = 1\n    )\n\nNext, we will visualize the frequencies of DEGs with an expression triangle.\n\n# Plot expression triangle\n## AD1\np_triangle_ad1_control &lt;- get_deg_counts(deg_ad1_control) |&gt;\n    plot_expression_triangle(\n        box_labels = c(\"A2\", \"D5\", \"AD1\", \"Midparent\")\n    ) +\n    labs(title = \"Control\") +\n    theme(plot.title = element_text(hjust = 0.5))\n\np_triangle_ad1_stress &lt;- get_deg_counts(deg_ad1_stress) |&gt;\n    plot_expression_triangle(\n        box_labels = c(\"A2\", \"D5\", \"AD1\", \"Midparent\")\n    ) +\n    labs(title = \"Stress\") +\n    theme(plot.title = element_text(hjust = 0.5))\n\n\n## AD4\np_triangle_ad4_control &lt;- get_deg_counts(deg_ad4_control) |&gt;\n    plot_expression_triangle(\n        box_labels = c(\"A2\", \"D5\", \"AD4\", \"Midparent\"),\n        palette = c(\"dodgerblue3\", \"firebrick\", \"darkgoldenrod\", \"darkgoldenrod3\")\n    ) +\n    labs(title = \"Control\") +\n    theme(plot.title = element_text(hjust = 0.5))\n\n\np_triangle_ad4_stress &lt;- get_deg_counts(deg_ad4_stress) |&gt;\n    plot_expression_triangle(\n        box_labels = c(\"A2\", \"D5\", \"AD4\", \"Midparent\"),\n        palette = c(\"dodgerblue3\", \"firebrick\", \"darkgoldenrod\", \"darkgoldenrod3\")\n    ) +\n    labs(title = \"Stress\") +\n    theme(plot.title = element_text(hjust = 0.5))\n\n\n# Combine plots\np_triangle_all &lt;- wrap_plots(\n    p_triangle_ad1_control,\n    p_triangle_ad1_stress,\n    p_triangle_ad4_control,\n    p_triangle_ad4_stress,\n    nrow = 2\n) +\n    plot_annotation(tag_levels = \"A\") &\n    theme(plot.tag = element_text(size = 16))\n\np_triangle_all\n\n\n\n\n\n\n\n\nThe figure shows two interesting patterns:\n\nIn both hybrids and conditions, the number of differentially expressed genes is greater for the hybrids and the D subgenome as compared to the hybrids and the A subgenome. However, such difference is greatly reduced under salt stress.\nOverall, salt stress induces an increase in the number of differentially expressed genes relative to both progenitor species.\n\nNext, to better understand the effect of salt stress on subgenome expression bias, we will check if the differentially expressed genes between the hybrids and the parents are the same in control and stress conditions.\n\n# UpSet plot for AD1 \nad1 &lt;- list(\n    `A, control` = rownames(deg_ad1_control$F1_vs_P1),\n    `D, control` = rownames(deg_ad1_control$F1_vs_P2),\n    `A, stress` = rownames(deg_ad1_stress$F1_vs_P1),\n    `D, stress` = rownames(deg_ad1_stress$F1_vs_P2)\n)\nm_ad1 &lt;- ComplexHeatmap::make_comb_mat(ad1)\n\np_upset_ad1 &lt;- ComplexHeatmap::UpSet(\n    m_ad1, row_title = \"AD1\",\n    comb_col = ggsci::pal_jama()(7)[comb_degree(m_ad1)],\n    top_annotation = upset_top_annotation(m_ad1, add_numbers = TRUE),\n    set_order = c(\"A, control\", \"A, stress\", \"D, control\", \"D, stress\")\n)\n\n# UpSet plot for AD4 \nad4 &lt;- list(\n    `A, control` = rownames(deg_ad4_control$F1_vs_P1),\n    `D, control` = rownames(deg_ad4_control$F1_vs_P2),\n    `A, stress` = rownames(deg_ad4_stress$F1_vs_P1),\n    `D, stress` = rownames(deg_ad4_stress$F1_vs_P2)\n)\nm_ad4 &lt;- ComplexHeatmap::make_comb_mat(ad4)\n\np_upset_ad4 &lt;- ComplexHeatmap::UpSet(\n    m_ad4, row_title = \"AD4\",\n    comb_col = ggsci::pal_jama()(7)[comb_degree(m_ad4)],\n    top_annotation = upset_top_annotation(m_ad4, add_numbers = TRUE),\n    set_order = c(\"A, control\", \"A, stress\", \"D, control\", \"D, stress\")\n)\n\n# Combine UpSet plots into a single, side-by-side plot\np_upset_all &lt;- wrap_plots(\n    ggplotify::as.ggplot(p_upset_ad1), \n    ggplotify::as.ggplot(p_upset_ad4),\n    nrow = 1\n) +\n    plot_annotation(\n        title = \"Shared DEGs across conditions and hybrids\"\n    ) &\n    theme(plot.title = element_text(hjust = 0.5))\n\np_upset_all\n\n\n\n\n\n\n\n\nInterestingly, a large number of genes are differentially expressed between the hybrid and the parental genomes for both species (N = 2203 and 2703 for AD1 and AD4, respectively). For DEGs relative to the D subgenome, most of them are shared between control and stress conditions, while for DEGs relative to the A subgenome, most genes are only differentially expressed under salt stress.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Benchmark 1: allopolyploid and diploid cotton species under salt stress</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#classifying-genes-into-expression-groups",
    "href": "chapters/chapter_01.html#classifying-genes-into-expression-groups",
    "title": "1  Benchmark 1: allopolyploid and diploid cotton species under salt stress",
    "section": "1.5 Classifying genes into expression groups",
    "text": "1.5 Classifying genes into expression groups\nTo understand the expression patterns of hybrids relative to their progenitors, we will classify genes onto expression-based categories and classes as in Rapp, Udall, and Wendel (2009).\n\n# Classify genes in expression partitions (classes and categories)\npartition_ad1_control &lt;- expression_partitioning(deg_ad1_control)\npartition_ad4_control &lt;- expression_partitioning(deg_ad4_control)\n\npartition_ad1_stress &lt;- expression_partitioning(deg_ad1_stress)\npartition_ad4_stress &lt;- expression_partitioning(deg_ad4_stress)\n\nNow, let’s visualize results:\n\n# AD1\np_pfreq_ad1_c &lt;- plot_partition_frequencies(\n    partition_ad1_control, group_by = \"Class\", labels = c(\"A2\", \"AD1\", \"D5\")\n)\n\np_pfreq_ad1_s &lt;- plot_partition_frequencies(\n    partition_ad1_stress, group_by = \"Class\", labels = c(\"A2\", \"AD1\", \"D5\")\n)\n\n# AD4\np_pfreq_ad4_c &lt;- plot_partition_frequencies(\n    partition_ad4_control, group_by = \"Class\", labels = c(\"A2\", \"AD4\", \"D5\")\n)\n\np_pfreq_ad4_s &lt;- plot_partition_frequencies(\n    partition_ad4_stress, group_by = \"Class\", labels = c(\"A2\", \"AD4\", \"D5\")\n)\n\n# Combine plots\n## Layout: scheme + ((AD1_control + AD1_stress) / (AD4_control + AD4_stress))\np_freq_combined &lt;- wrap_plots(\n    p_pfreq_ad1_c[[1]],\n    wrap_plots(\n        p_pfreq_ad1_c[[2]] + labs(subtitle = \"AD1, control\", x = NULL), \n        p_pfreq_ad1_s[[2]] + labs(subtitle = \"AD1, stress\", x = NULL),\n        p_pfreq_ad4_c[[2]] + labs(subtitle = \"AD4, control\", x = NULL), \n        p_pfreq_ad4_s[[2]] + labs(subtitle = \"AD4, stress\", x = NULL),\n        nrow = 2, ncol = 2\n    ),\n    ncol = 2,\n    widths = c(1, 2)\n) &\n    theme(plot.margin = unit(c(1, 1, 1, 1), \"pt\"))\n\np_freq_combined\n\n\n\n\n\n\n\n\nThe figure shows that most genes display expression-level dominance towards the parent 1 (A2) in control and stress conditions, both for the AD1 and AD2 allopolyploids. However, for both species, such expression-level dominance is reduced under salt stress.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Benchmark 1: allopolyploid and diploid cotton species under salt stress</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#overrepresentation-analyses",
    "href": "chapters/chapter_01.html#overrepresentation-analyses",
    "title": "1  Benchmark 1: allopolyploid and diploid cotton species under salt stress",
    "section": "1.6 Overrepresentation analyses",
    "text": "1.6 Overrepresentation analyses\nNow, we will perform overrepresentation analyses of GO terms among genes in each expression class in each condition and species.\n\n# Load GO annotation\nload(here(\"data\", \"cotton_functions.rda\"))\ncotton_functions &lt;- lapply(cotton_functions, as.data.frame)\n\n# Perform ORA\n## AD1, control\ngenes_ad1_c &lt;- split(partition_ad1_control$Gene, partition_ad1_control$Class)\nora_ad1_c &lt;- lapply(\n    genes_ad1_c, ora,\n    annotation = bind_rows(cotton_functions), \n    background = rownames(se_ad1),\n    min_setsize = 1, max_setsize = 1000\n)\n\n## AD1, stress\ngenes_ad1_s &lt;- split(partition_ad1_stress$Gene, partition_ad1_stress$Class)\nora_ad1_s &lt;- lapply(\n    genes_ad1_s, ora,\n    annotation = bind_rows(cotton_functions), \n    background = rownames(se_ad1),\n    min_setsize = 1, max_setsize = 1000\n)\n\n## AD4, control\ngenes_ad4_c &lt;- split(partition_ad4_control$Gene, partition_ad4_control$Class)\nora_ad4_c &lt;- lapply(\n    genes_ad4_c, ora,\n    annotation = bind_rows(cotton_functions), \n    background = rownames(se_ad4),\n    min_setsize = 1, max_setsize = 1000\n)\n\n\n## AD4, stress\ngenes_ad4_s &lt;- split(partition_ad4_stress$Gene, partition_ad4_stress$Class)\nora_ad4_s &lt;- lapply(\n    genes_ad4_s, ora,\n    annotation = bind_rows(cotton_functions), \n    background = rownames(se_ad4),\n    min_setsize = 1, max_setsize = 1000\n)\n\n# Combining results\ncotton_enrichment_all &lt;- bind_rows(\n    bind_rows(ora_ad1_c, .id = \"Class\") |&gt; mutate(group = \"AD1_control\"),\n    bind_rows(ora_ad1_s, .id = \"Class\") |&gt; mutate(group = \"AD1_stress\"),\n    bind_rows(ora_ad4_c, .id = \"Class\") |&gt; mutate(group = \"AD4_control\"),\n    bind_rows(ora_ad4_s, .id = \"Class\") |&gt; mutate(group = \"AD4_stress\")\n) |&gt;\n    dplyr::select(class = Class, group, term, genes, all, padj)\n\n\n# Show results as an interactive table\nDT::datatable(\n    cotton_enrichment_all,\n    selection = \"single\",\n    rownames = FALSE,\n    options = list(\n        lengthMenu = c(5, 10, 25, 50),\n        pageLength = 10\n    )\n) |&gt;\n    DT::formatSignif(columns = \"padj\", digits = 3)\n\n\n\n\n\nIn summary, this is what we found for each class:\n\nADD: redox metabolism (cytochrome P450, heme binding, NAD+ nucleosidase activity, oxidoreductase activity, etc). No difference was observed between control and stress conditions.\nDOWN: ATP synthesis, aerobic respiration, electron transfer chain, chloroplast thylakoid membrane, organellar ribosome biogenesis, and photosynthesis. Some terms were specific to stress conditions, including cell wall organization, galacturonan metabolism, cellulose synthases, lipid transfer proteins, and glycoside hydrolases family 9.\nUP: ribonucleases H domain, cytochrome P450, wall-associated kinases, serine-threonine kinases, peptidases, redox metabolism. Specifically in stress conditions, genes are associated with abscisic acid binding, lectins, glutathione S-transferases, response to salicylic acid, chitinases, leucine-rich repeat (LRR) receptor kinases, pattern recognition receptors, WRKY transcription factors, and systemic acquired resistance.\nELD_P1: in control conditions, genes in this class were associated with chloroplast organization, circadian rhythm, glycine catabolism, photosynthesis, response to wounding, RNA modifications, phosphoglycolate phosphatases, response to water deprivation, ribosome biogenesis, and hydrogen peroxide biosynthesis. In stress conditions, no enrichment was found.\nELD_P2: in control conditions, genes were associated with redox metabolism (heme binding, cytochrome P450, monooxygenase activity, etc). Specifically in stress conditions, genes in this class were associated with alcohol dehydrogenases, coumarin biosynthesis, ERF and WRKY transcription factors, phenylpropanoid biosynthesis, regulation of defense response, and phenylalanine ammonia lyase activity.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Benchmark 1: allopolyploid and diploid cotton species under salt stress</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#saving-important-objects",
    "href": "chapters/chapter_01.html#saving-important-objects",
    "title": "1  Benchmark 1: allopolyploid and diploid cotton species under salt stress",
    "section": "Saving important objects",
    "text": "Saving important objects\nLastly, we will save important objects to files, so that they can be reused later.\n\n# Plots\nsave(\n    p_freq_combined, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_freq_combined.rda\")\n)\n\nsave(\n    p_upset_all, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_upset_all.rda\")\n)\n\nsave(\n    p_pca_combined, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_pca_combined.rda\")\n)\n\nsave(\n    p_triangle_all, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_triangle_all.rda\")\n)\n\npartition_tables &lt;- list(\n    AD1_control = partition_ad1_control,\n    AD1_stress = partition_ad1_stress,\n    AD4_control = partition_ad4_control,\n    AD4_stress = partition_ad4_stress\n)\n\n# Objects\npartition_tables &lt;- list(\n    AD1_control = partition_ad1_control,\n    AD1_stress = partition_ad1_stress,\n    AD4_control = partition_ad4_control,\n    AD4_stress = partition_ad4_stress\n)\n\n\nsave(\n    partition_tables, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"partition_tables.rda\")\n)\n\nsave(\n    cotton_enrichment_all, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"cotton_enrichment_all.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Benchmark 1: allopolyploid and diploid cotton species under salt stress</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#session-info",
    "href": "chapters/chapter_01.html#session-info",
    "title": "1  Benchmark 1: allopolyploid and diploid cotton species under salt stress",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-03-28\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.2)\n Biobase              * 2.62.0    2023-10-24 [1] Bioconductor\n BiocGenerics         * 0.48.1    2023-11-01 [1] Bioconductor\n BiocParallel           1.37.0    2024-01-19 [1] Github (Bioconductor/BiocParallel@79a1b2d)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.2)\n bslib                  0.6.1     2023-11-28 [1] CRAN (R 4.3.2)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.2)\n Cairo                  1.6-2     2023-11-28 [1] CRAN (R 4.3.2)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.2)\n cli                    3.6.2     2023-12-11 [1] CRAN (R 4.3.2)\n clue                   0.3-65    2023-09-23 [1] CRAN (R 4.3.2)\n cluster                2.1.5     2023-11-27 [4] CRAN (R 4.3.2)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.2)\n ComplexHeatmap       * 2.18.0    2023-10-24 [1] Bioconductor\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.2)\n crosstalk              1.2.1     2023-11-23 [1] CRAN (R 4.3.2)\n DelayedArray           0.28.0    2023-10-24 [1] Bioconductor\n DESeq2                 1.42.0    2023-10-24 [1] Bioconductor\n digest                 0.6.34    2024-01-11 [1] CRAN (R 4.3.2)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.2)\n dplyr                * 1.1.4     2023-11-17 [1] CRAN (R 4.3.2)\n DT                     0.31      2023-12-09 [1] CRAN (R 4.3.2)\n ellipsis               0.3.2     2021-04-29 [1] CRAN (R 4.3.2)\n evaluate               0.23      2023-11-01 [1] CRAN (R 4.3.2)\n fansi                  1.0.6     2023-12-08 [1] CRAN (R 4.3.2)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.2)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.2)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.2)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.2)\n fs                     1.6.3     2023-07-20 [1] CRAN (R 4.3.2)\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.2)\n GenomeInfoDb         * 1.38.6    2024-02-08 [1] Bioconductor 3.18 (R 4.3.2)\n GenomeInfoDbData       1.2.11    2023-12-21 [1] Bioconductor\n GenomicRanges        * 1.54.1    2023-10-29 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.2)\n ggplot2              * 3.5.0     2024-02-23 [1] CRAN (R 4.3.2)\n ggplotify              0.1.2     2023-08-09 [1] CRAN (R 4.3.2)\n ggsci                  3.0.0     2023-03-08 [1] CRAN (R 4.3.2)\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.2)\n glue                   1.7.0     2024-01-09 [1] CRAN (R 4.3.2)\n gridGraphics           0.5-1     2020-12-13 [1] CRAN (R 4.3.2)\n gtable                 0.3.4     2023-08-21 [1] CRAN (R 4.3.2)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.2)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.2)\n htmltools              0.5.7     2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets            1.6.4     2023-12-06 [1] CRAN (R 4.3.2)\n HybridExpress        * 0.99.0    2024-02-15 [1] Bioconductor\n IRanges              * 2.36.0    2023-10-24 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.2)\n jquerylib              0.1.4     2021-04-26 [1] CRAN (R 4.3.2)\n jsonlite               1.8.8     2023-12-04 [1] CRAN (R 4.3.2)\n knitr                  1.45      2023-10-30 [1] CRAN (R 4.3.2)\n labeling               0.4.3     2023-08-29 [1] CRAN (R 4.3.2)\n lattice                0.22-5    2023-10-24 [4] CRAN (R 4.3.1)\n lifecycle              1.0.4     2023-11-07 [1] CRAN (R 4.3.2)\n locfit                 1.5-9.8   2023-06-11 [1] CRAN (R 4.3.2)\n lubridate            * 1.9.3     2023-09-27 [1] CRAN (R 4.3.2)\n magick                 2.8.2     2023-12-20 [1] CRAN (R 4.3.2)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.2)\n Matrix                 1.6-3     2023-11-14 [4] CRAN (R 4.3.2)\n MatrixGenerics       * 1.14.0    2023-10-24 [1] Bioconductor\n matrixStats          * 1.2.0     2023-12-11 [1] CRAN (R 4.3.2)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.2)\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.2)\n patchwork            * 1.2.0     2024-01-08 [1] CRAN (R 4.3.2)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.2)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.2)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.2)\n purrr                * 1.0.2     2023-08-10 [1] CRAN (R 4.3.2)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.2)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.2)\n Rcpp                   1.0.12    2024-01-09 [1] CRAN (R 4.3.2)\n RCurl                  1.98-1.14 2024-01-09 [1] CRAN (R 4.3.2)\n readr                * 2.1.5     2024-01-10 [1] CRAN (R 4.3.2)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.2)\n rlang                  1.1.3     2024-01-10 [1] CRAN (R 4.3.2)\n rmarkdown              2.25      2023-09-18 [1] CRAN (R 4.3.2)\n rprojroot              2.0.4     2023-11-05 [1] CRAN (R 4.3.2)\n rstudioapi             0.15.0    2023-07-07 [1] CRAN (R 4.3.2)\n S4Arrays               1.2.0     2023-10-24 [1] Bioconductor\n S4Vectors            * 0.40.2    2023-11-23 [1] Bioconductor 3.18 (R 4.3.2)\n sass                   0.4.8     2023-12-06 [1] CRAN (R 4.3.2)\n scales                 1.3.0     2023-11-28 [1] CRAN (R 4.3.2)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.2)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.2)\n SparseArray            1.2.4     2024-02-11 [1] Bioconductor 3.18 (R 4.3.2)\n stringi                1.8.3     2023-12-11 [1] CRAN (R 4.3.2)\n stringr              * 1.5.1     2023-11-14 [1] CRAN (R 4.3.2)\n SummarizedExperiment * 1.32.0    2023-10-24 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.2)\n tidyr                * 1.3.1     2024-01-24 [1] CRAN (R 4.3.2)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.2)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.2)\n timechange             0.3.0     2024-01-18 [1] CRAN (R 4.3.2)\n tzdb                   0.4.0     2023-05-12 [1] CRAN (R 4.3.2)\n utf8                   1.2.4     2023-10-22 [1] CRAN (R 4.3.2)\n vctrs                  0.6.5     2023-12-01 [1] CRAN (R 4.3.2)\n withr                  3.0.0     2024-01-16 [1] CRAN (R 4.3.2)\n xfun                   0.42      2024-02-08 [1] CRAN (R 4.3.2)\n XVector                0.42.0    2023-10-24 [1] Bioconductor\n yaml                   2.3.8     2023-12-11 [1] CRAN (R 4.3.2)\n yulab.utils            0.1.4     2024-01-28 [1] CRAN (R 4.3.2)\n zlibbioc               1.48.0    2023-10-24 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Benchmark 1: allopolyploid and diploid cotton species under salt stress</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_01.html#references",
    "href": "chapters/chapter_01.html#references",
    "title": "1  Benchmark 1: allopolyploid and diploid cotton species under salt stress",
    "section": "References",
    "text": "References\n\n\n\n\nDong, Yating, Guanjing Hu, Corrinne E Grover, Emma R Miller, Shuijin Zhu, and Jonathan F Wendel. 2022. “Parental Legacy Versus Regulatory Innovation in Salt Stress Responsiveness of Allopolyploid Cotton (Gossypium) Species.” The Plant Journal 111 (3): 872–87.\n\n\nRapp, Ryan A, Joshua A Udall, and Jonathan F Wendel. 2009. “Genomic Expression Dominance in Allopolyploids.” BMC Biology 7 (1): 1–10.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Benchmark 1: allopolyploid and diploid cotton species under salt stress</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html",
    "href": "chapters/chapter_02.html",
    "title": "2  Benchmark 2: transcriptomic analyses of heterosis in rice root traits",
    "section": "",
    "text": "2.1 Data description and experimental design\nWe will start by loading the data set, which is stored in a SummarizedExperiment object with a count matrix and sample metadata.\n# Load the data\nload(here(\"data\", \"se_rice.rda\"))\n\nse_rice\n\nclass: SummarizedExperiment \ndim: 42081 12 \nmetadata(0):\nassays(1): counts\nrownames(42081): Os01t0100100-01 Os01t0100200-01 ... Os12t0641500-03\n  Os12t0641600-01\nrowData names(0):\ncolnames(12): R1 R2 ... F3 F4\ncolData names(3): Line Stage Generation\n\n# Taking a look at the assay\nhead(assay(se_rice))\n\n                 R1  R2  R3  R4  X1  X2  X3  X4  F1  F2  F3  F4\nOs01t0100100-01 397 685 247 332 372 348 489 414 257 420 225 262\nOs01t0100200-01   7  21  14   8   9   2  10  15   3   9   8  12\nOs01t0100400-01  90 195  81  54 141  56 114  91 110 345  52  68\nOs01t0100500-01 436 571 324 315 418 353 509 516 280 371 289 276\nOs01t0100600-01 264 443 191 300 211 249 345 360 215 195 206 162\nOs01t0100650-00  12   3   3   2  12  13  39   2   0   2   0  14\n\n# Taking a look at the sample metadata\ncolData(se_rice) |&gt; as.data.frame()\n\n           Line     Stage Generation\nR1        R9308 Tillering         P1\nR2        R9308 Tillering         P1\nR3        R9308   Heading         P1\nR4        R9308   Heading         P1\nX1 Xieqingzao B Tillering         P2\nX2 Xieqingzao B Tillering         P2\nX3 Xieqingzao B   Heading         P2\nX4 Xieqingzao B   Heading         P2\nF1  Xieyou 9308 Tillering         F1\nF2  Xieyou 9308 Tillering         F1\nF3  Xieyou 9308   Heading         F1\nF4  Xieyou 9308   Heading         F1\nAs we can see in the sample metadata, for each stage (tillering and heading), two replicates were obtained for each generation (parents and hybrid). Line Xieyou 9308 represents the hybrid, while lines R9308 and Xieqingzao B represent the parents 1 and 2, respectively. Given this experimental design, we will perform comparative analyses separately for each stage. Thus, our triplets will be:\nLet’s subset the data accordingly:\n# Get triplets for each stage\nse_h &lt;- se_rice[, se_rice$Stage == \"Heading\"]\nse_t &lt;- se_rice[, se_rice$Stage == \"Tillering\"]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Benchmark 2: transcriptomic analyses of heterosis in rice root traits</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html#data-description-and-experimental-design",
    "href": "chapters/chapter_02.html#data-description-and-experimental-design",
    "title": "2  Benchmark 2: transcriptomic analyses of heterosis in rice root traits",
    "section": "",
    "text": "R9308 &lt;-&gt; Xieyou 9308 &lt;-&gt; Xieqingzao B, heading stage\nR9308 &lt;-&gt; Xieyou 9308 &lt;-&gt; Xieqingzao B, tillering",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Benchmark 2: transcriptomic analyses of heterosis in rice root traits</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html#data-processing",
    "href": "chapters/chapter_02.html#data-processing",
    "title": "2  Benchmark 2: transcriptomic analyses of heterosis in rice root traits",
    "section": "2.2 Data processing",
    "text": "2.2 Data processing\nHere, we will first remove non-expressed genes (sum of counts &lt;10 across all samples). Then, we will add midparent expression values to each set, and normalize count data by library size.\n\n# Remove non-expressed genes\nse_h &lt;- se_h[rowSums(assay(se_h)) &gt;= 10, ]\nse_t &lt;- se_t[rowSums(assay(se_t)) &gt;= 10, ]\n\n# Add midparent expression\nse_h &lt;- add_midparent_expression(se_h)\nse_t &lt;- add_midparent_expression(se_t)\n\n# Normalize data by library size\nse_h &lt;- add_size_factors(se_h)\nse_t &lt;- add_size_factors(se_t)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Benchmark 2: transcriptomic analyses of heterosis in rice root traits</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html#exploratory-data-analyses",
    "href": "chapters/chapter_02.html#exploratory-data-analyses",
    "title": "2  Benchmark 2: transcriptomic analyses of heterosis in rice root traits",
    "section": "2.3 Exploratory data analyses",
    "text": "2.3 Exploratory data analyses\nNow, we will perform exploratory data analyses to check if samples group together as expected. We will first explore sample clustering with PCA plots.\n\n# Plot PCA for each stage separately\np_pca_h &lt;- pca_plot(se_h, color_by = \"Generation\", add_mean = TRUE) + \n    labs(title = \"PCA of samples - Heading stage\")\n\np_pca_t &lt;- pca_plot(se_t, color_by = \"Generation\", add_mean = TRUE) + \n    labs(title = \"PCA of samples - Tillering stage\")\n\n# Combine plots\np_pca_combined &lt;- patchwork::wrap_plots(\n    p_pca_h + theme(legend.position = \"bottom\", legend.box = \"vertical\"), \n    p_pca_t + theme(legend.position = \"bottom\", legend.box = \"vertical\"),\n    nrow = 1\n) +\n    plot_layout(guides = \"collect\") &\n    theme(legend.position = \"bottom\")\n\np_pca_combined\n\n\n\n\n\n\n\n\nNow, let’s visualize a heatmap of sample correlations.\n\n# Heatmap of sample correlations\np_hmh &lt;- plot_samplecor(se_h, coldata_cols = \"Generation\", show_rownames = FALSE)\np_hmh@column_title &lt;- \"Heading\"\n\np_hmt &lt;- plot_samplecor(se_t, coldata_cols = \"Generation\", show_rownames = FALSE)\np_hmt@column_title &lt;- \"Tillering\"\n\n# Combine plots - one per row\np_hm_combined &lt;- patchwork::wrap_plots(\n    ggplotify::as.ggplot(p_hmh), \n    ggplotify::as.ggplot(p_hmt), \n    nrow = 2\n)\n\np_hm_combined\n\n\n\n\n\n\n\n\nIn the heading stage, samples group very well by line, as demonstrated by both the PCA plot and the heatmap of sample correlations. In the tillering stage, though, there is a lot of within-group variation for the hybrid samples, which is an issue that could probably be mitigated by including more replicates. This is something we need to keep in mind when interpreting results in the following sections.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Benchmark 2: transcriptomic analyses of heterosis in rice root traits</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html#identifying-differentially-expressed-genes-in-triplets",
    "href": "chapters/chapter_02.html#identifying-differentially-expressed-genes-in-triplets",
    "title": "2  Benchmark 2: transcriptomic analyses of heterosis in rice root traits",
    "section": "2.4 Identifying differentially expressed genes in triplets",
    "text": "2.4 Identifying differentially expressed genes in triplets\nHere, we will identify differentially expressed genes (DEGs) between pairwise combinations of lines in a triplet in the heading and tillering stages.\n\n# Get DEGs\ndeg_h &lt;- get_deg_list(se_h, lfcThreshold = 1)\ndeg_t &lt;- get_deg_list(se_t, lfcThreshold = 1)\n\nNext, we will visualize the frequencies of DEGs with an expression triangle.\n\n# Plot expression triangle\np_triangle_h &lt;- get_deg_counts(deg_h) |&gt;\n    plot_expression_triangle(\n        box_labels = c(\"R9308\", \"Xieqingzao B\", \"Xieyou 9308\", \"Midparent\")\n    ) +\n    labs(title = \"Heading\") +\n    theme(plot.title = element_text(hjust = 0.5))\n\np_triangle_t &lt;- get_deg_counts(deg_t) |&gt;\n    plot_expression_triangle(\n        box_labels = c(\"R9308\", \"Xieqingzao B\", \"Xieyou 9308\", \"Midparent\")\n    ) +\n    labs(title = \"Tillering\") +\n    theme(plot.title = element_text(hjust = 0.5))\n\n# Combine plots\np_triangle_all &lt;- wrap_plots(\n    p_triangle_h,\n    p_triangle_t,\n    nrow = 1\n) +\n    plot_annotation(tag_levels = \"A\") &\n    theme(plot.tag = element_text(size = 16))\n\np_triangle_all\n\n\n\n\n\n\n\n\nThe triangle plot shows a clear imbalance in the number of DEGs in the hybrid relative both parents, with much more DEGs relative to the Xieqingzao B line in the heading stage, and much more DEGs relative to the R9308 line in the tillering stage. This results suggest a developmental stage-mediated shift in expression-level dominance, with a bias towards parent R9308 in the heading stage, and a bias towards parent Xieqingzao B in the tillering stage. However, considering the large within-group variance for hybrid samples in the tillering stage, it is not clear whether such shift bias is due to true biological differences or an artifact resulting from such large variances.\nNext, to better understand the differences and similarities between stages, we will explore the overlap of DEGs between stages.\n\n# Create a list of DEGs for each contrast and create a combination matrix\ndeg_sets &lt;- list(\n    `R9308, heading` = rownames(deg_h$F1_vs_P1),\n    `Xieqingzao B, heading` = rownames(deg_h$F1_vs_P2),\n    `R9308, tillering` = rownames(deg_t$F1_vs_P1),\n    `Xieqingzao B, tillering` = rownames(deg_t$F1_vs_P2)\n)\nm &lt;- ComplexHeatmap::make_comb_mat(deg_sets)\n\n# Plot UpSet\np_upset &lt;- ComplexHeatmap::UpSet(\n    m,\n    comb_col = ggsci::pal_jama()(7)[comb_degree(m)],\n    top_annotation = upset_top_annotation(m, add_numbers = TRUE),\n    set_order = names(deg_sets)\n)\n\np_upset\n\n\n\n\n\n\n\n\nThe figure shows that, overall, most of the DEGs between the hybrid and parents are parent- and stage-specific (e.g., only differentially expressed relative to R9308 in the heading stage). However, we also observed a large overlap in DEGs relative to both parents in each stage (N = 286 and 280 for the heading and tillering stages, respectively), and a similar but smaller overlap exists for DEGs relative to the same parent in different stages (N = 186 and 217 for lines R9308 and Xieqingziao B, respectively).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Benchmark 2: transcriptomic analyses of heterosis in rice root traits</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html#classifying-genes-into-expression-groups",
    "href": "chapters/chapter_02.html#classifying-genes-into-expression-groups",
    "title": "2  Benchmark 2: transcriptomic analyses of heterosis in rice root traits",
    "section": "2.5 Classifying genes into expression groups",
    "text": "2.5 Classifying genes into expression groups\nTo understand the expression patterns of hybrids relative to their progenitors, we will classify genes onto expression-based categories and classes as in Rapp, Udall, and Wendel (2009).\n\n# Classify genes in expression partitions (classes and categories)\npartition_h &lt;- expression_partitioning(deg_h)\npartition_t &lt;- expression_partitioning(deg_t)\n\nNow, let’s visualize results:\n\n# Get frequency of genes per class\np_pfreq_h &lt;- plot_partition_frequencies(partition_h, group_by = \"Class\")\np_pfreq_t &lt;- plot_partition_frequencies(partition_t, group_by = \"Class\")\n\n# Combine plots\np_freq_combined &lt;- wrap_plots(\n    p_pfreq_h[[1]],\n    p_pfreq_h[[2]] + labs(subtitle = \"Heading\", x = NULL), \n    p_pfreq_t[[2]] + labs(subtitle = \"Tillering\", x = NULL), \n    nrow = 1, \n    widths = c(1, 2, 2)\n)\n\np_freq_combined\n\n\n\n\n\n\n\n\nThe figure shows that most genes (67.51%) display expression-level dominance (ELD) towards parent 1 (R9308 line) in the heading stage, which is in line with what we observed in the expression triangle plot. However, in the tillering stage, most genes (41.24%) display ELD towards parent 2 (Xieqingzao B), but large fractions of the genes also display ELD towards parent 1 (25.78%) and transgressive down-regulation (26.04%), again suggesting a dramatic shift in expression patterns in temporal scale.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Benchmark 2: transcriptomic analyses of heterosis in rice root traits</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html#overrepresentation-analyses",
    "href": "chapters/chapter_02.html#overrepresentation-analyses",
    "title": "2  Benchmark 2: transcriptomic analyses of heterosis in rice root traits",
    "section": "2.6 Overrepresentation analyses",
    "text": "2.6 Overrepresentation analyses\nNow, we will perform overrepresentation analyses of GO terms among genes in each expression class in each stage.\n\n# Load GO annotation\nload(here(\"data\", \"rice_functions.rda\"))\nrice_functions &lt;- lapply(rice_functions, as.data.frame)\n\n# Perform ORA\n## Heading\ngenes_h &lt;- split(partition_h$Gene, partition_h$Class)\nora_h &lt;- lapply(\n    genes_h, ora,\n    annotation = bind_rows(rice_functions), \n    background = rownames(se_h),\n    min_setsize = 2, max_setsize = 1000\n)\n\n## Tillering\ngenes_t &lt;- split(partition_t$Gene, partition_t$Class)\nora_t &lt;- lapply(\n    genes_t, ora,\n    annotation = bind_rows(rice_functions), \n    background = rownames(se_t),\n    min_setsize = 2, max_setsize = 1000\n)\n\n# Combining results\nrice_enrichment_all &lt;- bind_rows(\n    bind_rows(ora_h, .id = \"Class\") |&gt; mutate(group = \"Heading\"),\n    bind_rows(ora_t, .id = \"Class\") |&gt; mutate(group = \"Tillering\")\n) |&gt;\n    dplyr::select(class = Class, group, term, genes, all, padj)\n\n# Show results as an interactive table\nDT::datatable(\n    rice_enrichment_all,\n    selection = \"single\",\n    rownames = FALSE,\n    options = list(\n        lengthMenu = c(5, 10, 25, 50),\n        pageLength = 10\n    )\n) |&gt;\n    DT::formatSignif(columns = \"padj\", digits = 3)\n\n\n\n\n\nIn summary, this is what we found for each class:\n\nADD: a single term (ADP binding) at heading stage.\nDOWN: flavone biosynthesis, glutathione S-transferase, MYB transcription factors, CASP-like protein 1U at heading stage. At tillering stage, the only term was CASP-like protein 1U.\nUP: at the heading stage, genes were associated with cell wall organization, COBRA, early nodulins, response to anoxia, and beta-glucan biosynthesis. No terms were found at the tillering stage.\nELD_P1: at the heading stage, genes were associated with aquaporins, and diacylglycerol kinases. No terms were found at the tillering stage.\nELD_P2: at the heading and tillering stages, genes were associated with photosynthesis. There were also tillering stage-specific terms, including apoptose-activating factors, gibberellin biosynthesis, terpene synthases, and isoprenoid biosynthesis.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Benchmark 2: transcriptomic analyses of heterosis in rice root traits</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html#saving-important-objects",
    "href": "chapters/chapter_02.html#saving-important-objects",
    "title": "2  Benchmark 2: transcriptomic analyses of heterosis in rice root traits",
    "section": "Saving important objects",
    "text": "Saving important objects\nLastly, we will save important objects to files, so that they can be reused later.\n\n# Plots\np_freq_combined_b2 &lt;- p_freq_combined\nsave(\n    p_freq_combined_b2, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_freq_combined_b2.rda\")\n)\n\np_upset_b2 &lt;- p_upset\nsave(\n    p_upset_b2, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_upset_b2.rda\")\n)\n\np_pca_b2 &lt;- p_pca_combined\nsave(\n    p_pca_b2, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_pca_b2.rda\")\n)\n\np_triangle_b2 &lt;- p_triangle_all\nsave(\n    p_triangle_b2, compress = \"xz\",\n    file = here(\"products\", \"plots\", \"p_triangle_b2.rda\")\n)\n\n# Objects\npartition_tables_b2 &lt;- list(\n    Heading = partition_h,\n    Tillering = partition_t\n)\n\nsave(\n    partition_tables_b2, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"partition_tables_b2.rda\")\n)\n\nsave(\n    rice_enrichment_all, compress = \"xz\",\n    file = here(\"products\", \"result_files\", \"rice_enrichment_all.rda\")\n)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Benchmark 2: transcriptomic analyses of heterosis in rice root traits</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html#session-info",
    "href": "chapters/chapter_02.html#session-info",
    "title": "2  Benchmark 2: transcriptomic analyses of heterosis in rice root traits",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-03-28\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package              * version   date (UTC) lib source\n abind                  1.4-5     2016-07-21 [1] CRAN (R 4.3.2)\n Biobase              * 2.62.0    2023-10-24 [1] Bioconductor\n BiocGenerics         * 0.48.1    2023-11-01 [1] Bioconductor\n BiocParallel           1.37.0    2024-01-19 [1] Github (Bioconductor/BiocParallel@79a1b2d)\n bitops                 1.0-7     2021-04-24 [1] CRAN (R 4.3.2)\n bslib                  0.6.1     2023-11-28 [1] CRAN (R 4.3.2)\n cachem                 1.0.8     2023-05-01 [1] CRAN (R 4.3.2)\n Cairo                  1.6-2     2023-11-28 [1] CRAN (R 4.3.2)\n circlize               0.4.15    2022-05-10 [1] CRAN (R 4.3.2)\n cli                    3.6.2     2023-12-11 [1] CRAN (R 4.3.2)\n clue                   0.3-65    2023-09-23 [1] CRAN (R 4.3.2)\n cluster                2.1.5     2023-11-27 [4] CRAN (R 4.3.2)\n codetools              0.2-19    2023-02-01 [4] CRAN (R 4.2.2)\n colorspace             2.1-0     2023-01-23 [1] CRAN (R 4.3.2)\n ComplexHeatmap       * 2.18.0    2023-10-24 [1] Bioconductor\n crayon                 1.5.2     2022-09-29 [1] CRAN (R 4.3.2)\n crosstalk              1.2.1     2023-11-23 [1] CRAN (R 4.3.2)\n DelayedArray           0.28.0    2023-10-24 [1] Bioconductor\n DESeq2                 1.42.0    2023-10-24 [1] Bioconductor\n digest                 0.6.34    2024-01-11 [1] CRAN (R 4.3.2)\n doParallel             1.0.17    2022-02-07 [1] CRAN (R 4.3.2)\n dplyr                * 1.1.4     2023-11-17 [1] CRAN (R 4.3.2)\n DT                     0.31      2023-12-09 [1] CRAN (R 4.3.2)\n ellipsis               0.3.2     2021-04-29 [1] CRAN (R 4.3.2)\n evaluate               0.23      2023-11-01 [1] CRAN (R 4.3.2)\n fansi                  1.0.6     2023-12-08 [1] CRAN (R 4.3.2)\n farver                 2.1.1     2022-07-06 [1] CRAN (R 4.3.2)\n fastmap                1.1.1     2023-02-24 [1] CRAN (R 4.3.2)\n forcats              * 1.0.0     2023-01-29 [1] CRAN (R 4.3.2)\n foreach                1.5.2     2022-02-02 [1] CRAN (R 4.3.2)\n fs                     1.6.3     2023-07-20 [1] CRAN (R 4.3.2)\n generics               0.1.3     2022-07-05 [1] CRAN (R 4.3.2)\n GenomeInfoDb         * 1.38.6    2024-02-08 [1] Bioconductor 3.18 (R 4.3.2)\n GenomeInfoDbData       1.2.11    2023-12-21 [1] Bioconductor\n GenomicRanges        * 1.54.1    2023-10-29 [1] Bioconductor\n GetoptLong             1.0.5     2020-12-15 [1] CRAN (R 4.3.2)\n ggplot2              * 3.5.0     2024-02-23 [1] CRAN (R 4.3.2)\n ggplotify              0.1.2     2023-08-09 [1] CRAN (R 4.3.2)\n ggsci                  3.0.0     2023-03-08 [1] CRAN (R 4.3.2)\n GlobalOptions          0.1.2     2020-06-10 [1] CRAN (R 4.3.2)\n glue                   1.7.0     2024-01-09 [1] CRAN (R 4.3.2)\n gridGraphics           0.5-1     2020-12-13 [1] CRAN (R 4.3.2)\n gtable                 0.3.4     2023-08-21 [1] CRAN (R 4.3.2)\n here                 * 1.0.1     2020-12-13 [1] CRAN (R 4.3.2)\n hms                    1.1.3     2023-03-21 [1] CRAN (R 4.3.2)\n htmltools              0.5.7     2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets            1.6.4     2023-12-06 [1] CRAN (R 4.3.2)\n HybridExpress        * 0.99.0    2024-02-15 [1] Bioconductor\n IRanges              * 2.36.0    2023-10-24 [1] Bioconductor\n iterators              1.0.14    2022-02-05 [1] CRAN (R 4.3.2)\n jquerylib              0.1.4     2021-04-26 [1] CRAN (R 4.3.2)\n jsonlite               1.8.8     2023-12-04 [1] CRAN (R 4.3.2)\n knitr                  1.45      2023-10-30 [1] CRAN (R 4.3.2)\n labeling               0.4.3     2023-08-29 [1] CRAN (R 4.3.2)\n lattice                0.22-5    2023-10-24 [4] CRAN (R 4.3.1)\n lifecycle              1.0.4     2023-11-07 [1] CRAN (R 4.3.2)\n locfit                 1.5-9.8   2023-06-11 [1] CRAN (R 4.3.2)\n lubridate            * 1.9.3     2023-09-27 [1] CRAN (R 4.3.2)\n magick                 2.8.2     2023-12-20 [1] CRAN (R 4.3.2)\n magrittr               2.0.3     2022-03-30 [1] CRAN (R 4.3.2)\n Matrix                 1.6-3     2023-11-14 [4] CRAN (R 4.3.2)\n MatrixGenerics       * 1.14.0    2023-10-24 [1] Bioconductor\n matrixStats          * 1.2.0     2023-12-11 [1] CRAN (R 4.3.2)\n memoise                2.0.1     2021-11-26 [1] CRAN (R 4.3.2)\n munsell                0.5.0     2018-06-12 [1] CRAN (R 4.3.2)\n patchwork            * 1.2.0     2024-01-08 [1] CRAN (R 4.3.2)\n pillar                 1.9.0     2023-03-22 [1] CRAN (R 4.3.2)\n pkgconfig              2.0.3     2019-09-22 [1] CRAN (R 4.3.2)\n png                    0.1-8     2022-11-29 [1] CRAN (R 4.3.2)\n purrr                * 1.0.2     2023-08-10 [1] CRAN (R 4.3.2)\n R6                     2.5.1     2021-08-19 [1] CRAN (R 4.3.2)\n RColorBrewer           1.1-3     2022-04-03 [1] CRAN (R 4.3.2)\n Rcpp                   1.0.12    2024-01-09 [1] CRAN (R 4.3.2)\n RCurl                  1.98-1.14 2024-01-09 [1] CRAN (R 4.3.2)\n readr                * 2.1.5     2024-01-10 [1] CRAN (R 4.3.2)\n rjson                  0.2.21    2022-01-09 [1] CRAN (R 4.3.2)\n rlang                  1.1.3     2024-01-10 [1] CRAN (R 4.3.2)\n rmarkdown              2.25      2023-09-18 [1] CRAN (R 4.3.2)\n rprojroot              2.0.4     2023-11-05 [1] CRAN (R 4.3.2)\n rstudioapi             0.15.0    2023-07-07 [1] CRAN (R 4.3.2)\n S4Arrays               1.2.0     2023-10-24 [1] Bioconductor\n S4Vectors            * 0.40.2    2023-11-23 [1] Bioconductor 3.18 (R 4.3.2)\n sass                   0.4.8     2023-12-06 [1] CRAN (R 4.3.2)\n scales                 1.3.0     2023-11-28 [1] CRAN (R 4.3.2)\n sessioninfo            1.2.2     2021-12-06 [1] CRAN (R 4.3.2)\n shape                  1.4.6     2021-05-19 [1] CRAN (R 4.3.2)\n SparseArray            1.2.4     2024-02-11 [1] Bioconductor 3.18 (R 4.3.2)\n stringi                1.8.3     2023-12-11 [1] CRAN (R 4.3.2)\n stringr              * 1.5.1     2023-11-14 [1] CRAN (R 4.3.2)\n SummarizedExperiment * 1.32.0    2023-10-24 [1] Bioconductor\n tibble               * 3.2.1     2023-03-20 [1] CRAN (R 4.3.2)\n tidyr                * 1.3.1     2024-01-24 [1] CRAN (R 4.3.2)\n tidyselect             1.2.0     2022-10-10 [1] CRAN (R 4.3.2)\n tidyverse            * 2.0.0     2023-02-22 [1] CRAN (R 4.3.2)\n timechange             0.3.0     2024-01-18 [1] CRAN (R 4.3.2)\n tzdb                   0.4.0     2023-05-12 [1] CRAN (R 4.3.2)\n utf8                   1.2.4     2023-10-22 [1] CRAN (R 4.3.2)\n vctrs                  0.6.5     2023-12-01 [1] CRAN (R 4.3.2)\n withr                  3.0.0     2024-01-16 [1] CRAN (R 4.3.2)\n xfun                   0.42      2024-02-08 [1] CRAN (R 4.3.2)\n XVector                0.42.0    2023-10-24 [1] Bioconductor\n yaml                   2.3.8     2023-12-11 [1] CRAN (R 4.3.2)\n yulab.utils            0.1.4     2024-01-28 [1] CRAN (R 4.3.2)\n zlibbioc               1.48.0    2023-10-24 [1] Bioconductor\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Benchmark 2: transcriptomic analyses of heterosis in rice root traits</span>"
    ]
  },
  {
    "objectID": "chapters/chapter_02.html#references",
    "href": "chapters/chapter_02.html#references",
    "title": "2  Benchmark 2: transcriptomic analyses of heterosis in rice root traits",
    "section": "References",
    "text": "References\n\n\n\n\nRapp, Ryan A, Joshua A Udall, and Jonathan F Wendel. 2009. “Genomic Expression Dominance in Allopolyploids.” BMC Biology 7 (1): 1–10.\n\n\nZhai, Rongrong, Yue Feng, Huimin Wang, Xiaodeng Zhan, Xihong Shen, Weiming Wu, Yingxin Zhang, et al. 2013. “Transcriptome Analysis of Rice Root Heterosis by RNA-Seq.” BMC Genomics 14 (1): 1–14.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Benchmark 2: transcriptomic analyses of heterosis in rice root traits</span>"
    ]
  },
  {
    "objectID": "chapters/appendices.html",
    "href": "chapters/appendices.html",
    "title": "Appendix: Data acquisition",
    "section": "",
    "text": "se_cotton.rda\nThis data set was obtained from (Dong et al. 2022), and it comprises RNA-seq data on cotton (Gossypium) species of different ploidy levels (i.e., allopolyploids and their diploid progenitors) under salt stress. The SummarizedExperiment object was created with the code below:\nlibrary(SummarizedExperiment)\nlibrary(tidyverse)\n\n# Get count matrix\ncounts &lt;- read.table(\n    file.path(\n        \"https://raw.githubusercontent.com/Wendellab\",\n        \"SaltStressTranscriptome/master/salt.counts\"\n    ),\n    header = TRUE, sep = \"\\t\", row.names = 1\n)[, -c(1:5)]\nnames(counts) &lt;- gsub(\"sort.bam\", \"sort.T.bam\", names(counts))\nnames(counts) &lt;- gsub(\".sort|.bam|_5.22|_5.23|6.11\", \"\", names(counts))\n\n# Get subset of data for each species\nA2count &lt;- counts[, grep(\"A2\", names(counts))]\nA2count &lt;- cbind(\n    A2count[, 1:5] + A2count[, 6:10], # Control 1\n    A2count[, grep(\"CK2\", names(A2count))], # Control 2\n    A2count[, 16:20] + A2count[, 21:25], # Control 3\n    A2count[, grep(\"Salt1\", names(A2count))], # Salt 1\n    A2count[, 31:35] + A2count[, 36:40], # Salt 2\n    A2count[, 41:45] + A2count[, 46:50] # Salt 3\n)\n\n# Combine count matrices\nc_counts &lt;- cbind(A2count, D5count, TM1count, AD4count)\n\n# Get total counts\ndiploid_total &lt;- c_counts[, grep(\"A2.*T$|D5.*T$\", names(c_counts))]\nTM1_total &lt;- c_counts[, grep(\"TM1.*A$|TM1.*D$\", names(c_counts))]\nTM1_total &lt;- TM1_total[, seq(1, 11, by = 2)] + TM1_total[, seq(2, 12, by = 2)]\nAD4_total &lt;- c_counts[, grep(\"AD4.*A$|AD4.*D$\", names(c_counts))]\nAD4_total &lt;- AD4_total[, seq(1, 11, by = 2)] + AD4_total[, seq(2, 12, by = 2)]\ncounts_total &lt;- cbind(diploid_total, TM1_total, AD4_total)\n\n# Polish column names\nnames(counts_total) &lt;- gsub(\"\\\\.T|\\\\.A|_\\\\.T|_\\\\.A\", \"\", names(counts_total))\nnames(counts_total) &lt;- gsub(\"TM1\", \"AD1\", names(counts_total))\n\n# Create colData\ncoldata &lt;- data.frame(\n    row.names = names(counts_total),\n    species = rep(c(\"A2\", \"D5\", \"AD1\", \"AD4\"), each = 6),\n    condition = rep(rep(c(\"Control\", \"Salt\"), each = 3), 4),\n    rep = rep(1:3, 8)\n) |&gt;\n    mutate(\n        sample = paste(species, condition, sep = \"_\"),\n        species_name = rep(\n            c(\"Garboreum\", \"Graimondii\", \"Ghirsutum_TM1\", \"Gmustelinum\"), \n            each = 6\n        ),\n        ploidy = rep(c(\"di\", \"allo\"), each = 12)\n    ) |&gt;\n    select(species_name, species, ploidy, condition, sample, rep)\n\n\n# Creating the SummarizedExperiment object\nse_cotton &lt;- SummarizedExperiment(\n    assays = list(counts = as.matrix(counts_total)),\n    colData = coldata\n)\n\n# Save object to file\nsave(\n    se_cotton, compress = \"xz\",\n    file = here::here(\"data\", \"se_cotton.rda\")\n)",
    "crumbs": [
      "Appendix: Data acquisition"
    ]
  },
  {
    "objectID": "chapters/appendices.html#cotton_functions.rda",
    "href": "chapters/appendices.html#cotton_functions.rda",
    "title": "Appendix: Data acquisition",
    "section": "cotton_functions.rda",
    "text": "cotton_functions.rda\nThis object contains a list of data frames with GO, InterPro, and MapMan annotations for genes in the G. raimondii genome. Data were obtained from PLAZA Dicots 5.0 (Van Bel et al. 2022).\n\n# Get data frames\ngo_df &lt;- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/GO/go.gra.csv.gz\",\n    skip = 8\n) |&gt;\n    dplyr::select(gene = `#gene_id`, description)\n\ninterpro_df &lt;- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/InterPro/interpro.gra.csv.gz\",\n    skip = 8\n) |&gt;\n    dplyr::select(gene = `#gene_id`, description)\n\nmapman_df &lt;- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/MapMan/mapman.gra.csv.gz\",\n    skip = 8\n) |&gt;\n    dplyr::select(gene = gene_id, description = desc)\n\n# Create list\ncotton_functions &lt;- list(\n    GO = go_df,\n    InterPro = interpro_df,\n    MapMan = mapman_df\n)\n\n# Save object to .rda file\nsave(\n    cotton_functions, compress = \"xz\", \n    file = here(\"data\", \"cotton_functions.rda\")\n)",
    "crumbs": [
      "Appendix: Data acquisition"
    ]
  },
  {
    "objectID": "chapters/appendices.html#se_rice.rda",
    "href": "chapters/appendices.html#se_rice.rda",
    "title": "Appendix: Data acquisition",
    "section": "se_rice.rda",
    "text": "se_rice.rda\nThis file contains a SummarizedExperiment object with data from Zhai et al. (2013), obtained from GEO under accession number GSE41797.\n\n# Read data set from GEO\nrice &lt;- readr::read_tsv(\n    \"https://ftp.ncbi.nlm.nih.gov/geo/series/GSE41nnn/GSE41797/suppl/GSE41797%5Frice%5Fall%5Fresults.txt.gz\"\n)\n\n# Get count matrix\nrice_exp &lt;- rice |&gt;\n    dplyr::select(\n        Gene_id, R1, R2, R3, R4, X1, X2, X3, X4, F1, F2, F3, F4\n    ) |&gt;\n    tibble::column_to_rownames(\"Gene_id\") |&gt;\n    as.matrix()\n\n# Get sample metadata\nrice_coldata &lt;- data.frame(\n    row.names = colnames(rice_exp),\n    Line = c(\n        rep(\"R9308\", 4), rep(\"Xieqingzao B\", 4), rep(\"Xieyou 9308\", 4)\n    ),\n    Stage = rep(c(\"Tillering\", \"Tillering\", \"Heading\", \"Heading\"), 3),\n    Generation = c(\n        rep(\"P1\", 4), rep(\"P2\", 4), rep(\"F1\", 4)\n    )\n)\n\n# Create SummarizedExperiment object\nse_rice &lt;- SummarizedExperiment::SummarizedExperiment(\n    assays = list(counts = rice_exp),\n    colData = rice_coldata\n)\n\n# Save object to file\nsave(\n    se_rice, compress = \"xz\",\n    file = here::here(\"data\", \"se_rice.rda\")\n)",
    "crumbs": [
      "Appendix: Data acquisition"
    ]
  },
  {
    "objectID": "chapters/appendices.html#rice_functions.rda",
    "href": "chapters/appendices.html#rice_functions.rda",
    "title": "Appendix: Data acquisition",
    "section": "rice_functions.rda",
    "text": "rice_functions.rda\nThis object contains a list of 2-column data frames with functional annotation for rice (Oryza sativa ssp. japonica). List names are GO, InterPro, and MapMan, and each table has columns named gene (gene id as in the count matrix in se_rice), and description (term description).\n\n# Get a table of tx-to-gene mapping\ntx2gene &lt;- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/IdConversion/id_conversion.osa.csv.gz\",\n    skip = 8, show_col_types = FALSE\n) |&gt;\n    dplyr::filter(id_type == \"tid\") |&gt;\n    dplyr::select(tx = id, gene = `#gene_id`)\n\n# Get functional annotation\n## GO\ngo_df &lt;- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/GO/go.osa.csv.gz\",\n    skip = 8, show_col_types = FALSE\n) |&gt;\n    dplyr::select(gene = `#gene_id`, description) |&gt;\n    inner_join(tx2gene) |&gt;\n    dplyr::select(gene = tx, description)\n\n## InterPro\ninterpro_df &lt;- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/InterPro/interpro.osa.csv.gz\",\n    skip = 8, show_col_types = FALSE\n) |&gt;\n    dplyr::select(gene = `#gene_id`, description) |&gt;\n    inner_join(tx2gene) |&gt;\n    dplyr::select(gene = tx, description)\n\n## MapMan\nmapman_df &lt;- readr::read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/MapMan/mapman.osa.csv.gz\",\n    skip = 8, show_col_types = FALSE\n) |&gt;\n    dplyr::select(gene = gene_id, description = desc) |&gt;\n    inner_join(tx2gene) |&gt;\n    dplyr::select(gene = tx, description)\n\n# Create list\nrice_functions &lt;- list(\n    GO = go_df,\n    InterPro = interpro_df,\n    MapMan = mapman_df\n)\n\n# Save object to file\nsave(\n    rice_functions, compress = \"xz\",\n    file = here::here(\"data\", \"rice_functions.rda\")\n)",
    "crumbs": [
      "Appendix: Data acquisition"
    ]
  },
  {
    "objectID": "chapters/appendices.html#session-info",
    "href": "chapters/appendices.html#session-info",
    "title": "Appendix: Data acquisition",
    "section": "Session info",
    "text": "Session info\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.2 (2023-10-31)\n os       Ubuntu 22.04.3 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2024-02-19\n pandoc   3.1.1 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.2   2023-12-11 [1] CRAN (R 4.3.2)\n digest        0.6.34  2024-01-11 [1] CRAN (R 4.3.2)\n evaluate      0.23    2023-11-01 [1] CRAN (R 4.3.2)\n fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.3.2)\n htmltools     0.5.7   2023-11-03 [1] CRAN (R 4.3.2)\n htmlwidgets   1.6.4   2023-12-06 [1] CRAN (R 4.3.2)\n jsonlite      1.8.8   2023-12-04 [1] CRAN (R 4.3.2)\n knitr         1.45    2023-10-30 [1] CRAN (R 4.3.2)\n rlang         1.1.3   2024-01-10 [1] CRAN (R 4.3.2)\n rmarkdown     2.25    2023-09-18 [1] CRAN (R 4.3.2)\n rstudioapi    0.15.0  2023-07-07 [1] CRAN (R 4.3.2)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.3.2)\n xfun          0.42    2024-02-08 [1] CRAN (R 4.3.2)\n yaml          2.3.8   2023-12-11 [1] CRAN (R 4.3.2)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.3\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "Appendix: Data acquisition"
    ]
  },
  {
    "objectID": "chapters/appendices.html#references",
    "href": "chapters/appendices.html#references",
    "title": "Appendix: Data acquisition",
    "section": "References",
    "text": "References\n\n\n\n\nDong, Yating, Guanjing Hu, Corrinne E Grover, Emma R Miller, Shuijin Zhu, and Jonathan F Wendel. 2022. “Parental Legacy Versus Regulatory Innovation in Salt Stress Responsiveness of Allopolyploid Cotton (Gossypium) Species.” The Plant Journal 111 (3): 872–87.\n\n\nVan Bel, Michiel, Francesca Silvestri, Eric M Weitz, Lukasz Kreft, Alexander Botzki, Frederik Coppens, and Klaas Vandepoele. 2022. “PLAZA 5.0: Extending the Scope and Power of Comparative and Functional Genomics in Plants.” Nucleic Acids Research 50 (D1): D1468–74.\n\n\nZhai, Rongrong, Yue Feng, Huimin Wang, Xiaodeng Zhan, Xihong Shen, Weiming Wu, Yingxin Zhang, et al. 2013. “Transcriptome Analysis of Rice Root Heterosis by RNA-Seq.” BMC Genomics 14 (1): 1–14.",
    "crumbs": [
      "Appendix: Data acquisition"
    ]
  }
]